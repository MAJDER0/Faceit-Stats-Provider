@using Newtonsoft.Json
@using System.Globalization
@using Faceit_Stats_Provider.ModelsForAnalyzer;
@using static Faceit_Stats_Provider.Classes.StatsHelper;
@using static Faceit_Stats_Provider.Classes.GenerateStats;
@using static Faceit_Stats_Provider.Classes.ScoreFormula;
@model AnalyzerPartialViewModel

@{

    var faction1Leader = Model.ModifiedViewModel.Players.teams.faction1.leader;
    var faction1Players = Model.ModifiedViewModel.Players.teams.faction1.roster;
    var faction2Leader = Model.ModifiedViewModel.Players.teams.faction2.leader;
    var faction2Players = Model.ModifiedViewModel.Players.teams.faction2.roster;
    var playerStats = Model.ModifiedViewModel.PlayerStats;
    var playerMatchStats = Model.ModifiedViewModel.PlayerMatchStats;

    var CalculateNeededStastisticsResult = CalculateNeededStatistics(faction1Leader, faction2Leader, faction1Players, faction2Players, playerStats, playerMatchStats);

    var maps = CalculateNeededStastisticsResult.Item1;
    var faction1PlayerIds = CalculateNeededStastisticsResult.Item2;
    var faction2PlayerIds = CalculateNeededStastisticsResult.Item3;
    faction1Leader = CalculateNeededStastisticsResult.Item4;
    faction2Leader = CalculateNeededStastisticsResult.Item5;
    faction1Players = CalculateNeededStastisticsResult.Item6;
    faction2Players = CalculateNeededStastisticsResult.Item7;
    var faction1PlayerStats = CalculateNeededStastisticsResult.Item8;
    var faction2PlayerStats = CalculateNeededStastisticsResult.Item9;
    var faction1MapStatsKD = CalculateNeededStastisticsResult.Item10;
    var faction2MapStatsKD = CalculateNeededStastisticsResult.Item11;
    var faction1MapStatsKR = CalculateNeededStastisticsResult.Item12;
    var faction2MapStatsKR = CalculateNeededStastisticsResult.Item13;
    var faction1MapStatsWR = CalculateNeededStastisticsResult.Item14;
    var faction2MapStatsWR = CalculateNeededStastisticsResult.Item15;
    var faction1MapStatsMatches = CalculateNeededStastisticsResult.Item16;
    var faction2MapStatsMatches = CalculateNeededStastisticsResult.Item17;
    var mapScoresFaction1 = CalculateNeededStastisticsResult.Item18;
    var mapScoresFaction2 = CalculateNeededStastisticsResult.Item19;
    var mapAverageKDs = CalculateNeededStastisticsResult.Item20;
    var mapAverageKDsSecond = CalculateNeededStastisticsResult.Item21;
    var mapLinks = CalculateNeededStastisticsResult.Item22;
    var MapStatsForSinglePlayer = CalculateNeededStastisticsResult.Item23;


}





@{
    async Task AnalyzerGenerateAllStatisticsFirstTeam(List<string> maps, List<string> faction1PlayerIds, List<string> faction2PlayerIds, string? faction1Leader, string? faction2Leader, AnalyzerMatchPlayers.Roster[] faction1Players, AnalyzerMatchPlayers.Roster[] faction2Players, List<AnalyzerPlayerStats.Rootobject> faction1PlayerStats,
    List<AnalyzerPlayerStats.Rootobject> faction2PlayerStats, Dictionary<string, List<string>> faction1MapStatsKD, Dictionary<string, List<string>> faction2MapStatsKD,
    Dictionary<string, List<string>> faction1MapStatsKR, Dictionary<string, List<string>> faction2MapStatsKR, Dictionary<string, List<string>> faction1MapStatsWR, Dictionary<string, List<string>> faction2MapStatsWR,
    Dictionary<string, List<string>> faction1MapStatsMatches, Dictionary<string, List<string>> faction2MapStatsMatches, List<(string, double)> mapScoresFaction1, List<(string, double)> mapScoresFaction2, List<(double, bool, double, string)> mapAverageKDs,
    List<(double, bool, double, string)> mapAverageKDsSecond, Dictionary<string, string> mapLinks, List<(List<(double, bool, double, string)>, string)> MapStatsForSinglePlayer)
    {
    <div class="col-md-12">
                <p class="text-center subtitle">FAST CHOICE</p>

                <div class="FastChoiceContainer">
                    <div class="FastChoiceMainMapInfo">
                        @{
                        var lowestRecords = mapScoresFaction2.OrderBy(x => x.Item2)
                        .Take(4)
                        .ToList();

                        var recordWithLowestValue = lowestRecords.Count > 0 ? lowestRecords[0] : ("", 0);
                        var recordWithLowestValue2 = lowestRecords.Count > 1 ? lowestRecords[1] : ("", 0);
                        var recordWithLowestValue3 = lowestRecords.Count > 2 ? lowestRecords[2] : ("", 0);
                        var recordWithLowestValue4 = lowestRecords.Count > 3 ? lowestRecords[3] : ("", 0);
                        }
                        <p class="ResultFastChoiceMapName"><img src="~/trending-up.png" alt="Trending up icon" width="35" height="35" />@recordWithLowestValue.Item1</p>
                        <p class="HowIsItCalculated"><a href="~/FAQ#answer7" target="_blank">HOW IS IT CALCULATED?</a></p>
                    </div>

                    <div>
                        <img src="@(mapLinks[recordWithLowestValue.Item1.ToLower()])" width="225" height="140.63" />
                    </div>
                </div>

                <div class="BestPicksNStatsContainer">
                    <p class="BestPicks">BEST PICKS:<span style="color:#F2F2F2;">  @recordWithLowestValue.Item1, @recordWithLowestValue2.Item1, @recordWithLowestValue3.Item1, @recordWithLowestValue4.Item1 </span></p>
                </div>
    </div>

    <div class="col-md-12">
                <p class="text-center subtitle">OVERALL</p>

                @{
                List<(double, bool, double, string)> mapAverageKDsResult = new List<(double, bool, double, string)>();

                GenerateOverallSection(faction1PlayerStats, faction1PlayerIds, mapScoresFaction1, MapStatsForSinglePlayer, faction1MapStatsMatches, maps, false, Model.ModifiedViewModel.PlayerMatchStats, mapAverageKDsResult);
                }

                <div class="maps-container">
                    @{
                    await GenerateOverallMapStats(mapScoresFaction1, faction1MapStatsKD, faction1MapStatsKR, faction1MapStatsWR, faction1MapStatsMatches, mapAverageKDsResult, faction1PlayerIds);
                    }
                </div>
    </div>

    }
}


@{
    async Task AnalyzerGenerateAllStatisticsSecondTeam(List<string> maps, List<string> faction1PlayerIds, List<string> faction2PlayerIds, string? faction1Leader, string? faction2Leader, AnalyzerMatchPlayers.Roster[] faction1Players, AnalyzerMatchPlayers.Roster[] faction2Players, List<AnalyzerPlayerStats.Rootobject> faction1PlayerStats,
    List<AnalyzerPlayerStats.Rootobject> faction2PlayerStats, Dictionary<string, List<string>> faction1MapStatsKD, Dictionary<string, List<string>> faction2MapStatsKD,
    Dictionary<string, List<string>> faction1MapStatsKR, Dictionary<string, List<string>> faction2MapStatsKR, Dictionary<string, List<string>> faction1MapStatsWR, Dictionary<string, List<string>> faction2MapStatsWR,
    Dictionary<string, List<string>> faction1MapStatsMatches, Dictionary<string, List<string>> faction2MapStatsMatches, List<(string, double)> mapScoresFaction1, List<(string, double)> mapScoresFaction2, List<(double, bool, double, string)> mapAverageKDs,
    List<(double, bool, double, string)> mapAverageKDsSecond, Dictionary<string, string> mapLinks, List<(List<(double, bool, double, string)>, string)> MapStatsForSinglePlayer)
    {

    <div class="col-md-12">
                <p class="text-center subtitle">FAST CHOICE</p>

                <div class="FastChoiceContainer">
                    <div class="FastChoiceMainMapInfo">
                        @{
                        var lowestRecords = mapScoresFaction1.OrderBy(x => x.Item2)
                        .Take(4)
                        .ToList();

                        var recordWithLowestValue = lowestRecords.Count > 0 ? lowestRecords[0] : ("", 0);
                        var recordWithLowestValue2 = lowestRecords.Count > 1 ? lowestRecords[1] : ("", 0);
                        var recordWithLowestValue3 = lowestRecords.Count > 2 ? lowestRecords[2] : ("", 0);
                        var recordWithLowestValue4 = lowestRecords.Count > 3 ? lowestRecords[3] : ("", 0);
                        }
                        <p class="ResultFastChoiceMapName"><img src="~/trending-up.png" alt="Trending up icon" width="35" height="35" />@recordWithLowestValue.Item1</p>
                        <p class="HowIsItCalculated"><a href="~/FAQ#answer7" target="_blank">HOW IS IT CALCULATED?</a></p>
                    </div>

                    <div>
                        <img src="@(mapLinks[recordWithLowestValue.Item1.ToLower()])" width="225" height="140.63" />
                    </div>
                </div>

                <div class="BestPicksNStatsContainer">
                    <p class="BestPicks">BEST PICKS:<span style="color:#F2F2F2;">  @recordWithLowestValue.Item1, @recordWithLowestValue2.Item1, @recordWithLowestValue3.Item1, @recordWithLowestValue4.Item1 </span></p>
                </div>
    </div>

    <div class="col-md-12">
                <p class="text-center subtitle">OVERALL</p>

                @{
                List<(double, bool, double, string)> mapAverageKDsSecondResult = new List<(double, bool, double, string)>();

                GenerateOverallSection(faction2PlayerStats, faction2PlayerIds, mapScoresFaction2, MapStatsForSinglePlayer, faction2MapStatsMatches, maps, true, Model.ModifiedViewModel.PlayerMatchStats, mapAverageKDsSecondResult);
                }

                <div class="maps-container">
                    @{
                    await GenerateOverallMapStats(mapScoresFaction2, faction2MapStatsKD, faction2MapStatsKR, faction2MapStatsWR, faction2MapStatsMatches, mapAverageKDsSecondResult, faction2PlayerIds);
                    }
                </div>
    </div>


    }
}




<div id="statistics-container">
    <div class="container">


        <div class="row justify-content-center align-items-start">

            <div class="col-md-6">
                <p class="text-center title">@CapitalizeOnlyFirstLetter(Model.ModifiedViewModel.Players.teams.faction1.name.Replace("_"," "))</p>

                <div class="row">

                    <div class="StatsToRecalculateFirstTeam">

                        @{
                            await AnalyzerGenerateAllStatisticsFirstTeam(maps, faction1PlayerIds, faction2PlayerIds, faction1Leader, faction2Leader, faction1Players, faction2Players, faction1PlayerStats,
                            faction2PlayerStats, faction1MapStatsKD, faction2MapStatsKD, faction1MapStatsKR, faction2MapStatsKR, faction1MapStatsWR, faction2MapStatsWR, faction1MapStatsMatches, faction2MapStatsMatches, mapScoresFaction1, mapScoresFaction2, mapAverageKDs,
                            mapAverageKDsSecond, mapLinks, MapStatsForSinglePlayer);
                        }

                    </div>

                </div>
            </div>

            <div class="col-md-6">
                <p class="text-center title">@CapitalizeOnlyFirstLetter(Model.ModifiedViewModel.Players.teams.faction2.name.Replace("_"," "))</p>

                <div class="row">

                    <div class="StatsToRecalculateSecondTeam">

                        @{
                            MapStatsForSinglePlayer.Clear();

                            await AnalyzerGenerateAllStatisticsSecondTeam(maps, faction1PlayerIds, faction2PlayerIds, faction1Leader, faction2Leader, faction1Players, faction2Players, faction1PlayerStats,
                            faction2PlayerStats, faction1MapStatsKD, faction2MapStatsKD, faction1MapStatsKR, faction2MapStatsKR, faction1MapStatsWR, faction2MapStatsWR, faction1MapStatsMatches, faction2MapStatsMatches, mapScoresFaction1, mapScoresFaction2, mapAverageKDs,
                            mapAverageKDsSecond, mapLinks, MapStatsForSinglePlayer);
                        }

                    </div>

                </div>
            </div>

        </div>



    </div>
</div>







@functions {
    async Task GenerateOverallSection(List<AnalyzerPlayerStats.Rootobject> playerStats, List<string> playerIds, List<(string, double)> MapScores, List<(List<(double, bool, double, string)>, string)> MapStatsForSinglePlayer, Dictionary<string, List<string>> TeamMapStatsMatches, List<string> maps, bool SecondTeam, List<(string playerId, AnalyzerMatchStats.Rootobject)> PlayerMatchStats, List<(double, bool, double, string)> mapAverageKDsResult)
    {
        var OverallSectionInfo = OverallSection(playerStats, playerIds, MapScores, MapStatsForSinglePlayer, TeamMapStatsMatches, maps, false, PlayerMatchStats);

        var WrCombined = OverallSectionInfo.Item2;
        var KdCombined = OverallSectionInfo.Item3;
        var KrCombined = OverallSectionInfo.Item4;
        var totalMatchesCombined = OverallSectionInfo.Item1;
        var last20WrCombinedResult = OverallSectionInfo.Item6;
        var last20KdCombined = OverallSectionInfo.Item7;
        var last20KrCombined = OverallSectionInfo.Item8;
        var last20totalMatchesCombined = OverallSectionInfo.Item5;
        mapAverageKDsResult = OverallSectionInfo.Item9;

    <div class="BestPicksNStatsContainer">
                <p class="Combined">
                    COMBINED:

                    <span class="CombinedInfo"></span>
                    <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                    <span class="CombinedInfo" style="color:@(WrCombined >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @WrCombined.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                    <span class="CombinedInfo" style="color:@(KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KdCombined.ToString("F2").Replace(",", ".") </span><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                    <span class="CombinedInfo" style="color:@(KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>
                </p>

                <p class="Combined">
                    LAST 20:

                    <span class="CombinedInfo"></span>
                    <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @last20totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                    <span class="CombinedInfo" style="color:@(last20WrCombinedResult >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20WrCombinedResult.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                    <span class="CombinedInfo" style="color:@(last20KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KdCombined.ToString("F2").Replace(",", ".") </span><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                    <span class="CombinedInfo" style="color:@(last20KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>
                </p>
    </div>
    }


    public async Task GenerateOverallMapStats(List<(string, double)> MapScores, Dictionary<string, List<string>> TeamMapStatsKD, Dictionary<string, List<string>> TeamMapStatsKR, Dictionary<string, List<string>> TeamMapStatsWR, Dictionary<string, List<string>> TeamMapStatsTotalMatches, List<(double, bool, double, string)> mapAverageKDsResult, List<string> TeamPlayerIds)
    {
        foreach (var mapScore in MapScores)
        {
            var mapNameResult = CapitalizeFirstLetter(mapScore.Item1.ToLower());
            var averageKDResult = CalculateAverage(TeamMapStatsKD[mapScore.Item1]);
            var averageKRResult = CalculateAverage(TeamMapStatsKR[mapScore.Item1]);
            var averageWRResult = CalculateAverage(TeamMapStatsWR[mapScore.Item1]);
            var totalMatchesResult = CalculateTotalMatches(TeamMapStatsTotalMatches[mapScore.Item1]);

            mapAverageKDsResult = CalculateMapAverageKD(Model.ModifiedViewModel.PlayerMatchStats, mapScore.Item1, TeamPlayerIds);
            var AvgKdResult = CalculateAverage(mapAverageKDsResult.Select(kd => new List<double> { kd.Item1 }).ToList());
            var AvgKrResult = CalculateAverage(mapAverageKDsResult.Select(kr => new List<double> { kr.Item3 }).ToList());
            var winRatioResult = CalculateWinRatio(mapAverageKDsResult.Select(kd => new List<bool> { kd.Item2 }).ToList());

            <div class="flex-container">
                <div class="OverallAnalyzeMap">
                    <img src="~/Map_Icons/de_@(mapScore.Item1.ToLower()).png" width="45" height="45" class="MapIcon" />
                    <div class="OverallAnalyzerMapDetails">
                        <span class="OverallAnalyzerMapName" id="OverallAnalyzerMapName-@mapScore.Item1">
                            <span class="AnalyzerMapNameStyle">@mapNameResult:</span>
                            <span class="AnalyzerResultOverall" style="font-weight:bold;">@totalMatchesResult  <span style="color:#F2F2F2; font-weight:normal;">Matches,</span></span>
                            <span class="AnalyzerResultOverall" style="color:@(averageWRResult >= 50 ? "#6BBE49" : "#F20707")">@averageWRResult.ToString("F0")% <span style="color:#F2F2F2; font-weight:normal;">WR,</span></span>
                            <span class="AnalyzerResultOverall" style="color:@(averageKDResult >= 1.00 ? "#6BBE49" : "#F20707")">@averageKDResult.ToString("F2").Replace(",", ".") <span style="color:#F2F2F2; font-weight:normal;">K/D,</span></span>
                            <span class="AnalyzerResultOverall" style="color:@(averageKRResult >= 0.75 ? "#6BBE49" : "#F20707")">@averageKRResult.ToString("F2").Replace(",", ".") <span style="color:#F2F2F2; font-weight:normal;">K/R</span></span>
                        </span>
                        <div class="OverallLast20AnalyzeMap">
                            <span class="Last20InfoText" id="Last20InfoText-@mapScore.Item1">
                                <span style="color:#5A0273; font-weight:bold;">Last 20:</span>
                                <span class="AnalyzerResultOverallLast10">@mapAverageKDsResult.Count() <span style="color:#F2F2F2;  font-weight:normal;"> Matches,</span></span>
                                @if (mapAverageKDsResult.Count() != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(winRatioResult >= 50 ? "#6BBE49" : "#F20707")">@winRatioResult.ToString("F0").Replace(",", ".")% <span style="color:#F2F2F2;  font-weight:normal;">WR,</span></span>

                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }
                                @if (AvgKdResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKdResult > 1.00 ? "#6BBE49" : "#F20707")">@AvgKdResult.ToString("F2").Replace(",", ".")<span style="color:#F2F2F2;  font-weight:normal;"> K/D,</span></span>

                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }
                                @if (AvgKrResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKrResult > 0.75 ? "#6BBE49" : "#F20707")">@AvgKrResult.ToString("F2").Replace(",", ".")<span style="color:#F2F2F2;  font-weight:normal;"> K/R</span></span>
                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                }
                            </span>
                        </div>
                    </div>
                </div>
            </div>

        }
    }
}


