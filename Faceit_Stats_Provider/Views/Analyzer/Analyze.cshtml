@using System.Globalization
@using Faceit_Stats_Provider.ModelsForAnalyzer;
@model Faceit_Stats_Provider.ModelsForAnalyzer.AnalyzerViewModel;

<div class="container">
    <div class="row justify-content-center align-items-start">
        @{
            var faction1Leader = Model.Players.teams.faction1.leader;
            var faction1Players = Model.Players.teams.faction1.roster;
            var faction2Leader = Model.Players.teams.faction2.leader;
            var faction2Players = Model.Players.teams.faction2.roster;
            List<string> maps = new List<string> { "DUST2", "MIRAGE", "INFERNO", "NUKE", "VERTIGO", "ANCIENT", "ANUBIS" };

            var faction1PlayerStats = Model.PlayerStats.Where(ps => faction1Players.Any(p => p.player_id == ps.player_id)).ToList();
            var faction2PlayerStats = Model.PlayerStats.Where(ps => faction2Players.Any(p => p.player_id == ps.player_id)).ToList();

            var faction1MapStatsKD = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsWR = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsKR = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsMatches = maps.ToDictionary(map => map, map => new List<string>());

            var faction2MapStatsKD = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsWR = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsKR = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsMatches = maps.ToDictionary(map => map, map => new List<string>());

            double Score(string map, string overallKD, string overallMatchesOnMap, string overallWR, string overallKR, string last20KD, string last20WR, string last20MatchesOnMap, string last20KR)
            {
                // Parse the string values to double with fallback to 0 if parsing fails
                double OverallKD = ParseDoubleOrDefault(overallKD);
                double OverallWR = ParseDoubleOrDefault(overallWR);
                double OverallMatches = ParseDoubleOrDefault(overallMatchesOnMap);

                double OverallKR = ParseDoubleOrDefault(overallKR);
                double Last20KD = ParseDoubleOrDefault(last20KD);
                double Last20WR = ParseDoubleOrDefault(last20WR);

                double LastQuantityOfMatches = ParseDoubleOrDefault(last20MatchesOnMap);
                double Last20KR = ParseDoubleOrDefault(last20KR);

                // Define normalization ranges
                double MinOverallKD = 0, MaxOverallKD = 3;
                double MinOverallMatches = 0, MaxOverallMatches = 17000;
                double MinKR = 0, MaxKR = 2;
                double MinWR = 0, MaxWR = 1;
                double MinLast20Matches = 0, MaxLast20Matches = 100;
                double MinLast20KD = 0, MaxLast20KD = 5;

                // Normalize the values
                double NormalizedOverallKD = NormalizeFactor(OverallKD, MinOverallKD, MaxOverallKD);
                double NormalizedOverallWR = NormalizeFactor(OverallWR / 100, MinWR, MaxWR);
                double NormalizedOverallMatches = NormalizeFactor(OverallMatches, MinOverallMatches, MaxOverallMatches);
                double NormalizedOverallKR = NormalizeFactor(OverallKR, MinKR, MaxKR);

                double NormalizedLast20KD = NormalizeFactor(Last20KD, MinLast20KD, MaxLast20KD);
                double NormalizedLast20WR = NormalizeFactor(Last20WR / 100, MinWR, MaxWR);
                double NormalizedLast20QuantityOfMatches = NormalizeFactor(LastQuantityOfMatches, MinLast20Matches, MaxLast20Matches);
                double NormalizedLast20KR = NormalizeFactor(Last20KR, MinKR, MaxKR);

                // Calculate the score based on weights
                double score =
                (0.5 * NormalizedOverallMatches)
                + (0.3 * NormalizedOverallWR)
                + (0.08 * NormalizedOverallKR)
                + (0.08 * NormalizedOverallKD)

                + (0.015 * NormalizedLast20QuantityOfMatches)
                + (0.0075 * NormalizedLast20KD)
                + (0.0075 * NormalizedLast20KR)
                + (0.010 * NormalizedLast20WR);

                return score;
            }

            double ParseDoubleOrDefault(string value)
            {
                double result;
                if (!double.TryParse(value.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out result))
                {
                    result = 0; // Default to 0 if parsing fails
                }
                return result;
            }

            var faction1PlayerIds = faction1Players.Select(p => p.player_id).ToList();
            var faction2PlayerIds = faction2Players.Select(p => p.player_id).ToList();

            foreach (var playerStat in faction1PlayerStats)
            {
                foreach (var segment in playerStat.segments.Where(s => maps.Contains(s.label.ToUpper())))
                {
                    faction1MapStatsKD[segment.label.ToUpper()].Add(segment.stats.AverageKDRatio);
                    faction1MapStatsWR[segment.label.ToUpper()].Add(segment.stats.WinRate);
                    faction1MapStatsKR[segment.label.ToUpper()].Add(segment.stats.AverageKRRatio);
                    faction1MapStatsMatches[segment.label.ToUpper()].Add(segment.stats.Matches);
                }
            }

            foreach (var playerStat in faction2PlayerStats)
            {
                foreach (var segment in playerStat.segments.Where(s => maps.Contains(s.label.ToUpper())))
                {
                    faction2MapStatsKD[segment.label.ToUpper()].Add(segment.stats.AverageKDRatio);
                    faction2MapStatsWR[segment.label.ToUpper()].Add(segment.stats.WinRate);
                    faction2MapStatsKR[segment.label.ToUpper()].Add(segment.stats.AverageKRRatio);
                    faction2MapStatsMatches[segment.label.ToUpper()].Add(segment.stats.Matches);
                }
            }

            List<(string, double)> mapScoresFaction1 = new List<(string, double)>();
            List<(string, double)> mapScoresFaction2 = new List<(string, double)>();

            var mapName = "";
            var mapNameSecond = "";
            double averageKD = 0, averageWR = 0, averageKR = 0, totalMatches = 0, AvgKd = 0, winRatio = 0, AvgKr = 0;
            double averageKDSecond = 0, averageWRSecond = 0, averageKRSecond = 0, totalMatchesSecond = 0, AvgKdSecond = 0, winRatioSecond = 0, AvgKrSecond = 0;

            List<(double, bool, double,string)> mapAverageKDs = new List<(double, bool, double,string)>();
            List<(double, bool, double,string)> mapAverageKDsSecond = new List<(double, bool, double,string)>();

            foreach (var map in maps)
            {
                mapName = CapitalizeFirstLetter(map.ToLower());
                averageKD = CalculateAverage(faction1MapStatsKD[map]);
                averageWR = CalculateAverage(faction1MapStatsWR[map]);
                averageKR = CalculateAverage(faction1MapStatsKR[map]);
                totalMatches = CalculateTotalMatches(faction1MapStatsMatches[map]);

                mapAverageKDs = CalculateMapAverageKD(Model.PlayerMatchStats, map, faction1PlayerIds);
                AvgKd = CalculateAverage(mapAverageKDs.Select(kd => new List<double> { kd.Item1 }).ToList());
                winRatio = CalculateWinRatio(mapAverageKDs.Select(kd => new List<bool> { kd.Item2 }).ToList());
                AvgKr = CalculateAverage(mapAverageKDs.Select(kr => new List<double> { kr.Item3 }).ToList());

                var CurrenMapScore = Score(map, averageKD.ToString(), totalMatches.ToString(), averageWR.ToString(), averageKR.ToString(), AvgKd.ToString(), winRatio.ToString(), mapAverageKDs.Count().ToString(), AvgKr.ToString());

                mapScoresFaction1.Add((map, CurrenMapScore));


                mapNameSecond = CapitalizeFirstLetter(map.ToLower());
                averageKDSecond = CalculateAverage(faction2MapStatsKD[map]);
                averageWRSecond = CalculateAverage(faction2MapStatsWR[map]);
                averageKRSecond = CalculateAverage(faction2MapStatsKR[map]);
                totalMatchesSecond = CalculateTotalMatches(faction2MapStatsMatches[map]);

                mapAverageKDsSecond = CalculateMapAverageKD(Model.PlayerMatchStats, map, faction2PlayerIds);
                AvgKdSecond = CalculateAverage(mapAverageKDsSecond.Select(kd => new List<double> { kd.Item1 }).ToList());
                winRatioSecond = CalculateWinRatio(mapAverageKDsSecond.Select(kd => new List<bool> { kd.Item2 }).ToList());
                AvgKrSecond = CalculateAverage(mapAverageKDsSecond.Select(kr => new List<double> { kr.Item3 }).ToList());

                var CurrenMapScoreSecond = Score(map, averageKDSecond.ToString(), totalMatchesSecond.ToString(), averageWRSecond.ToString(), averageKRSecond.ToString(), AvgKdSecond.ToString(), winRatioSecond.ToString(), mapAverageKDsSecond.Count().ToString(), AvgKrSecond.ToString());

                mapScoresFaction2.Add((map, CurrenMapScoreSecond));

            }

            var mapLinks = new Dictionary<string, string>
        {
        { "mirage", "https://distribution.faceit-cdn.net/images/c47710c4-4407-4dbd-ac89-2ef3b20a262e.jpeg" },
        { "vertigo", "https://distribution.faceit-cdn.net/images/a8d0572f-8a89-474a-babc-c2009cdc42f7.jpeg" },
        { "nuke", "https://distribution.faceit-cdn.net/images/faa7775b-f42b-4627-891a-21ee7cc13637.jpeg" },
        { "inferno", "https://distribution.faceit-cdn.net/images/d71cae42-b38c-470d-a548-0c59d6c71fbe.jpeg" },
        { "dust2", "https://distribution.faceit-cdn.net/images/4eafa800-b504-4dd2-afd0-90882c729140.jpeg" },
        { "anubis", "https://distribution.faceit-cdn.net/images/1c2412c7-ae0c-4fa1-ad86-82a3287cb479.jpeg" },
        { "ancient", "https://distribution.faceit-cdn.net/images/6f72ffec-7607-44cf-9c31-09a865fa92f5.jpeg" }
        };

            List<(List<(double, bool, double, string)>,string)> MapStatsForSinglePlayer = new List<(List<(double, bool, double, string)>,string)>();
        }

        <div class="col-md-6">
            <p class="text-center title">Team @faction1Players.FirstOrDefault(p => p.player_id == faction1Leader)?.nickname</p>

            <div class="row">

                <div class="col-md-12">
                    <p class="text-center subtitle">FAST CHOICE</p>

                    <div class="FastChoiceContainer">
                        <div class="FastChoiceMainMapInfo">
                            @{

                                var lowestRecords = mapScoresFaction2.OrderBy(x => x.Item2)
                                .Take(4)
                                .ToList();

                                var recordWithLowestValue = lowestRecords.Count > 0 ? lowestRecords[0] : ("", 0);
                                var recordWithLowestValue2 = lowestRecords.Count > 1 ? lowestRecords[1] : ("", 0);
                                var recordWithLowestValue3 = lowestRecords.Count > 2 ? lowestRecords[2] : ("", 0);
                                var recordWithLowestValue4 = lowestRecords.Count > 3 ? lowestRecords[3] : ("", 0);

                            }
                            @*<p class="Result"> Highest Win Probability</p>*@
                            <p class="ResultFastChoiceMapName"><img src="~/trending-up.png" alt="Trending up icon" width="35" height="35" />@recordWithLowestValue.Item1</p>
                            <p class="HowIsItCalculated"><a href="">HOW IS IT CALCULATED?</a></p>

                        </div>

                        <div>
                            <img src="@(mapLinks[recordWithLowestValue.Item1.ToLower()])" width=" 225" height="140.63" />
                        </div>

                    </div>

                    <div>
                        <p class="BestPicks">BEST PICKS:<span style="color:#F2F2F2;">  @recordWithLowestValue.Item1, @recordWithLowestValue2.Item1, @recordWithLowestValue3.Item1, @recordWithLowestValue4.Item1 </span></p>
                    </div>

                </div>


                <div class="col-md-12">
                    <p class="text-center subtitle">OVERALL</p>
                    @{
                        double KdCombined =0.00;
                        double KrCombined =0.00;
                        double WrCombined = 0.00;

                        int totalMatchesCombined = 0;

                        List<(double, bool, double, string)> mapAverageKDsResult = new List<(double, bool, double, string)>();

                        
                                    @foreach (var playerStat in faction1PlayerStats)
                        {

                            var KRInfo = playerStat.segments.Where(p => maps.Any(map => map.Equals(p.label, StringComparison.OrdinalIgnoreCase)) && p.mode=="5v5").ToList();
                            KrCombined += KRInfo.Sum(map => ParseDoubleOrDefault(map.stats.AverageKRRatio));
                            WrCombined += (ParseDoubleOrDefault(playerStat.lifetime.Wins) / ParseDoubleOrDefault(playerStat.lifetime.Matches)) * 100;
                            KdCombined += ParseDoubleOrDefault(playerStat.lifetime.AverageKDRatio);
                        }

                         KrCombined = KrCombined / 7;

                                            @foreach (var mapScore in mapScoresFaction1) {
                            totalMatchesCombined += CalculateTotalMatches(faction1MapStatsMatches[mapScore.Item1]);
                            mapAverageKDsResult = CalculateMapAverageKD(Model.PlayerMatchStats, mapScore.Item1, faction1PlayerIds);
                            MapStatsForSinglePlayer.Add((mapAverageKDsResult, mapScore.Item1.ToString()));
                        }

                        KdCombined = KdCombined / 5;
                        KrCombined = KrCombined / 5;
                        WrCombined = WrCombined / 5;
                    }
                    <div>
                        <p class="Combined">COMBINED:
                               
                                <span class="CombinedInfo"></span>
                                <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                            <span class="CombinedInfo" style="color:@(WrCombined >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @WrCombined.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                                <span class="CombinedInfo" style="color:@(KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KdCombined.ToString("F2").Replace(",", ".") </span ><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                                <span class="CombinedInfo" style="color:@(KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>
                                                          
                        </p>

                        <p class="Combined">LAST 20:

                            @{
                                var last20totalMatchesCombined = MapStatsForSinglePlayer.SelectMany(p => p.Item1).Count();
                                var last20KdCombined = MapStatsForSinglePlayer.SelectMany(p => p.Item1).Sum(k=>k.Item1); 
                                var last20KrCombined = MapStatsForSinglePlayer.SelectMany(p => p.Item1).Sum(k=>k.Item3);
                                double last20WrCombined = MapStatsForSinglePlayer.SelectMany(p => p.Item1).Count(k=>k.Item2==true);

                                last20KdCombined = last20KdCombined / last20totalMatchesCombined;
                                last20KrCombined = last20KrCombined / last20totalMatchesCombined;
                                double last20WrCombinedResult = (last20WrCombined / last20totalMatchesCombined)*100;
                            } 

                                <span class="CombinedInfo"></span>
                                <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @last20totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                                <span class="CombinedInfo" style="color:@(last20WrCombinedResult >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20WrCombinedResult.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                                <span class="CombinedInfo" style="color:@(last20KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KdCombined.ToString("F2").Replace(",", ".") </span ><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                                <span class="CombinedInfo" style="color:@(last20KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>

                        </p>
                    </div>

                    <div class="maps-container">
                        @foreach (var mapScore in mapScoresFaction1)
                        {
                            var mapNameResult = CapitalizeFirstLetter(mapScore.Item1.ToLower());
                            var averageKDResult = CalculateAverage(faction1MapStatsKD[mapScore.Item1]);
                            var averageKRResult = CalculateAverage(faction1MapStatsKR[mapScore.Item1]);
                            var averageWRResult = CalculateAverage(faction1MapStatsWR[mapScore.Item1]);
                            var totalMatchesResult = CalculateTotalMatches(faction1MapStatsMatches[mapScore.Item1]);

                            mapAverageKDsResult = CalculateMapAverageKD(Model.PlayerMatchStats, mapScore.Item1, faction1PlayerIds);
                            var AvgKdResult = CalculateAverage(mapAverageKDsResult.Select(kd => new List<double> { kd.Item1 }).ToList());
                            var AvgKrResult = CalculateAverage(mapAverageKDsResult.Select(kr => new List<double> { kr.Item3 }).ToList());
                            var winRatioResult = CalculateWinRatio(mapAverageKDsResult.Select(kd => new List<bool> { kd.Item2 }).ToList());


                            <div class="OverallAnalyzeMap">
                                <img src="~/Map_Icons/de_@(mapScore.Item1.ToLower()).png" width="45" height="45" class="MapIcon" />
                                <span class="OverallAnalyzerMapName">
                                    <span class="AnalyzerMapNameStyle">@mapNameResult:</span>
                                    <span class="AnalyzerResultOverall" style="font-weight:bold;">@totalMatchesResult</span> Matches,
                                    <span class="AnalyzerResultOverall" style="color:@(averageWRResult >= 50 ? "#6BBE49" : "#F20707")">@averageWRResult.ToString("F0")%</span>WR,
                                    <span class="AnalyzerResultOverall" style="color:@(averageKDResult >= 1.00 ? "#6BBE49" : "#F20707")">@averageKDResult.ToString("F2").Replace(",", ".")</span> K/D
                                    <span class="AnalyzerResultOverall" style="color:@(averageKRResult >= 0.75 ? "#6BBE49" : "#F20707")">@averageKRResult.ToString("F2").Replace(",", ".")</span> K/R
                                </span>
                            </div>

                            <div class="OverallLast20AnalyzeMap">
                                <div style="width:45px; height:45px"></div>
                                <span style="color:#5A0273; font-weight:bold;">Last 20:</span>

                                <span class="AnalyzerResultOverallLast10">@mapAverageKDsResult.Count()</span><span>Matches,</span>


                                @if (mapAverageKDsResult.Count() != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(winRatioResult >= 50 ? "#6BBE49" : "#F20707")">@winRatioResult.ToString("F0").Replace(",", ".")%</span>

                                    <span>WR,</span>

                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }

                                @if (AvgKdResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKdResult > 1.00 ? "#6BBE49" : "#F20707")">@AvgKdResult.ToString("F2").Replace(",", ".")</span>

                                    <span>K/D,</span>
                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }

                                @if (AvgKrResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKrResult > 0.75 ? "#6BBE49" : "#F20707")">@AvgKrResult.ToString("F2").Replace(",",".")</span>

                                    <span>K/R</span>
                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                }



                            </div>
                        }
                    </div>

                </div>
                <div class="col-md-12">
                    <p class="text-center subtitle">PLAYERS</p>
                    @foreach (var playerStat in faction1PlayerStats)
                    {
                        var player = faction1Players.FirstOrDefault(p => p.player_id == playerStat.player_id);

                        if (player != null)
                        {

                             var displayedMapsLast20 = playerStat.segments
                            .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                            .OrderByDescending(x => x.label)
                            .ToList();

                            // Make a local copy of MapStatsForSinglePlayer
                            var localMapStatsForSinglePlayer = MapStatsForSinglePlayer.ToList();

                            var mapData = localMapStatsForSinglePlayer
                            .Where(m => displayedMapsLast20.Any(dm => string.Equals(dm.label, m.Item2, StringComparison.OrdinalIgnoreCase)) &&
                            m.Item1.Any(item => item.Item4 == player.player_id))
                            .Select(m => new
                            {
                                m.Item2, // map label
                                PlayerStats = m.Item1.Where(item => item.Item4 == player.player_id).ToList()
                            })
                            .ToList();

                            double PlayerLast20KD = 0.00;
                            double PlayerLast20KR = 0.00;
                            double PlayerLast20WR = 0.00;
                            int PlayerTotalMatchesLast20 = 0;

                            foreach (var map in mapData)
                            {
                                var Kd = map.PlayerStats.Select(k => k.Item1).Sum();
                                var Kr = map.PlayerStats.Select(k => k.Item3).Sum();
                                var Wr = map.PlayerStats.Count(k => k.Item2);

                                PlayerLast20KD += Kd;
                                PlayerLast20KR += Kr;
                                PlayerLast20WR += Wr;
                                PlayerTotalMatchesLast20 += map.PlayerStats.Count;


                            }

                            PlayerLast20KD = PlayerLast20KD / PlayerTotalMatchesLast20;
                            PlayerLast20KR = PlayerLast20KR / PlayerTotalMatchesLast20;
                            PlayerLast20WR = PlayerLast20WR / PlayerTotalMatchesLast20;

                            PlayerLast20WR = PlayerLast20WR * 100;



                            <div class="PlayerAnalyzer player-info" data-player-id="@player.player_id">
                                <div class="PlayerAnalyzerContent">
                                    <img src="~/plus_green.png" alt="Plus-Icon" class="PlayerAnalyzeplus" />
                                    <span>@player.nickname</span>
                                </div>
                            </div>
                            <br />
                            <div class="PlayerMapsAnalyzer hidden" data-player-id="@player.player_id">

                                   <div class="CombinedCombinedPlayerStatsAnalyzer">
                                    
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:#ff3c22; font-weight:100;">PLATFORM:</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="font-weight:bold;">@playerStat.lifetime.Matches</span><span>Matches,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(double.Parse(playerStat.lifetime.WinRate) >= 50 ? "#6BBE49" : "#F20707")">@playerStat.lifetime.WinRate%</span><span>WR,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(double.Parse(playerStat.lifetime.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ? "#6BBE49" : "#F20707")">@playerStat.lifetime.AverageKDRatio</span> <span>K/D</span>
                                    @*<span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KR >= 0.75 ? "#6BBE49" : "#F20707")">@PlayerLast20KR.ToString("F2").Replace(",", ".")</span> <span>K/R</span>*@
                                </div>


                                <div class="CombinedLast20PlayerStatsAnalyzer">
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:#ff3c22; font-weight:100;">LAST 20:</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="font-weight:bold;">@PlayerTotalMatchesLast20.ToString("F0")</span><span>Matches,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20WR >= 50 ? "#6BBE49" : "#F20707")">@PlayerLast20WR.ToString("F0")%</span><span>WR,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KD >= 1.00 ? "#6BBE49" : "#F20707")">@PlayerLast20KD.ToString("F2").Replace(",", ".")</span> <span>K/D,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KR >= 0.75 ? "#6BBE49" : "#F20707")">@PlayerLast20KR.ToString("F2").Replace(",", ".")</span> <span>K/R</span>
                                </div>


                                @{
                                    var displayedMaps = playerStat.segments
                                    .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                                    .OrderByDescending(x => x.label)
                                    .ToList();

                                                                        @foreach (var map in displayedMaps)
                                    {
                                        var PlayerMapStatsLast20 = CalculatePlayerMapAverage(MapStatsForSinglePlayer, player.player_id, map.label);

                                                                            <div class="map-item">

                                                                                <div class="map-item-element">
                                                                                    <img src="~/Map_Icons/de_@(map.label.ToLower()).png" width="45" height="45" class="MapIcon" />
                                                                                <div class="map-item-stats-container">

                                                                                <span style="font-weight:bold;">@map.label:</span>
                                                                                    <span class="AnalyzerResult" style="color:@(int.Parse(map.stats.WinRate) >= 50 ? "#6BBE49" : "#F20707")">
                                                                                        <span style="color:#F2F2F2; font-weight:100;">@map.stats.Matches / </span>
                                                                                        @map.stats.WinRate%
                                                                                    </span> WR,
                                                                                    <span class="AnalyzerResult" style="color:@(Math.Round(double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 1.00 ? "#6BBE49" : "#F20707")">
                                                                                        @map.stats.AverageKDRatio
                                                                                    </span> K/D,
                                                                                                                                    <span class="AnalyzerResult" style="color:@(Math.Round(double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 0.75 ? "#6BBE49" : "#F20707")">
                                                                                        @map.stats.AverageKRRatio
                                                                                    </span> K/R
                                                                                    </div>
                                                                                </div>

                                                                                <div class="map-item-element map-item-element-Last20">
                                                                                    <div style="width:45px; height:45px"></div>
                                                                                    <span style="color:#5A0273; font-weight:bold;">Last 20:</span>
                                                                                    <span class="AnalyzerResultOverallLast10">@PlayerMapStatsLast20.totalMatches</span><span>Matches,</span>
                                                                                    

                                                                                    @if (PlayerMapStatsLast20.totalMatches != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.winRatio >= 50 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.winRatio.ToString("F0").Replace(",", ".")%</span>
                                                                                        <span>WR,</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                                }

                                                                                    @if (PlayerMapStatsLast20.avgKD != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.avgKD > 1.00 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.avgKD.ToString("F2").Replace(",", ".")</span>
                                                                                        <span>K/D,</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                                }

                                                                                    @if (PlayerMapStatsLast20.avgKR != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.avgKR > 0.75 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.avgKR.ToString("F2").Replace(",", ".")</span>
                                                                                        <span>K/R</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                                }

                                                                                </div>

                                                                            </div>
                                                                            <br />
                                    }

                                    if (displayedMaps.Count != 7)
                                    {
                                        for (int i = displayedMaps.Count; i < 7; i++)
                                        {
                                                                                <div class="map-item" style="height:55px;"></div>
                                                                                <br />
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <p class="text-center title">Team @faction2Players.FirstOrDefault(p => p.player_id == faction2Leader)?.nickname</p>

            <div class="row">

                <div class="col-md-12">
                    <p class="text-center subtitle">FAST CHOICE</p>

                    <div class="FastChoiceContainer">
                        <div class="FastChoiceMainMapInfo">
                            @{

                                lowestRecords = mapScoresFaction1.OrderBy(x => x.Item2)
                                .Take(4)
                                .ToList();

                                recordWithLowestValue = lowestRecords.Count > 0 ? lowestRecords[0] : ("", 0);
                                recordWithLowestValue2 = lowestRecords.Count > 1 ? lowestRecords[1] : ("", 0);
                                recordWithLowestValue3 = lowestRecords.Count > 2 ? lowestRecords[2] : ("", 0);
                                recordWithLowestValue4 = lowestRecords.Count > 3 ? lowestRecords[3] : ("", 0);

                            }
                            <p class="ResultFastChoiceMapName"><img src="~/trending-up.png" alt="Trending up icon" width="35" height="35" />@recordWithLowestValue.Item1</p>
                            <p class="HowIsItCalculated"><a href="">HOW IS IT CALCULATED?</a></p>

                        </div>

                        <div>
                            <img src="@(mapLinks[recordWithLowestValue.Item1.ToLower()])" width=" 225" height="140.63" />
                        </div>

                    </div>

                    <div>
                        <p class="BestPicks">BEST PICKS:<span style="color:#F2F2F2;">  @recordWithLowestValue.Item1, @recordWithLowestValue2.Item1, @recordWithLowestValue3.Item1, @recordWithLowestValue4.Item1 </span></p>
                    </div>

                </div>


                <div class="col-md-12">
                    <p class="text-center subtitle">OVERALL</p>

                    @{
                        KdCombined = 0.00;
                        KrCombined = 0.00;
                        WrCombined = 0.00;

                        totalMatchesCombined = 0;

                        List<(double, bool, double, string)> mapAverageKDsSecondResult = new List<(double, bool, double, string)>();

                                    @foreach (var playerStat in faction2PlayerStats)
                        {
                            var KRInfo = playerStat.segments.Where(p => maps.Any(map => map.Equals(p.label, StringComparison.OrdinalIgnoreCase)) && p.mode=="5v5").ToList();
                            KrCombined += KRInfo.Sum(map => ParseDoubleOrDefault(map.stats.AverageKRRatio));
                            WrCombined += (ParseDoubleOrDefault(playerStat.lifetime.Wins) / ParseDoubleOrDefault(playerStat.lifetime.Matches)) * 100;
                            KdCombined += ParseDoubleOrDefault(playerStat.lifetime.AverageKDRatio);
                        }

                         KrCombined = KrCombined / 7;

                                    @foreach (var mapScore in mapScoresFaction2)
                        {
                            totalMatchesCombined += CalculateTotalMatches(faction2MapStatsMatches[mapScore.Item1]);
                            mapAverageKDsSecondResult = CalculateMapAverageKD(Model.PlayerMatchStats, mapScore.Item1, faction2PlayerIds);
                            MapStatsForSinglePlayer.Add((mapAverageKDsSecondResult, mapScore.Item1.ToString()));
                        }

                        KdCombined = KdCombined / 5;
                        KrCombined = KrCombined / 5;
                        WrCombined = WrCombined / 5;
                    }
                    <div>
                        <p class="Combined">
                            COMBINED:

                            <span class="CombinedInfo"></span>
                            <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                            <span class="CombinedInfo" style="color:@(WrCombined >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @WrCombined.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                            <span class="CombinedInfo" style="color:@(KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KdCombined.ToString("F2").Replace(",", ".") </span><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                            <span class="CombinedInfo" style="color:@(KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>

                        </p>

                        <p class="Combined">
                            LAST 20:

                            @{
                                var SecondTeamData = MapStatsForSinglePlayer.Skip(7);

                                 last20totalMatchesCombined = SecondTeamData.SelectMany(p => p.Item1).Count();
                                 last20KdCombined = SecondTeamData.SelectMany(p => p.Item1).Sum(k => k.Item1);
                                 last20KrCombined = SecondTeamData.SelectMany(p => p.Item1).Sum(k => k.Item3);
                                last20WrCombined = SecondTeamData.SelectMany(p => p.Item1).Count(k => k.Item2 == true);

                                last20KdCombined = last20KdCombined / last20totalMatchesCombined;
                                last20KrCombined = last20KrCombined / last20totalMatchesCombined;
                                last20WrCombinedResult = (last20WrCombined / last20totalMatchesCombined) * 100;
                            }

                            <span class="CombinedInfo"></span>
                            <span class="CombinedInfo" style="color:#F2F2F2; font-weight:bold;"> @last20totalMatchesCombined</span><span class="CombinedInfo" style="color:#F2F2F2;"> Matches, </span>
                            <span class="CombinedInfo" style="color:@(last20WrCombinedResult >= 50 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20WrCombinedResult.ToString("F0").Replace(",", ".")%</span> <span class="CombinedInfo" style="color:#F2F2F2;"> WR, </span>
                            <span class="CombinedInfo" style="color:@(last20KdCombined >= 1.00 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KdCombined.ToString("F2").Replace(",", ".") </span><span class="CombinedInfo" style="color:#F2F2F2;">K/D, </span>
                            <span class="CombinedInfo" style="color:@(last20KrCombined >= 0.75 ? "#6BBE49" : "#F20707"); font-weight:bold;"> @last20KrCombined.ToString("F2").Replace(",", ".")</span> <span class="CombinedInfo" style="color:#F2F2F2;"> K/R </span>

                        </p>
                    </div>


                    <div class="maps-container">
                        @foreach (var mapScore in mapScoresFaction2)
                        {
                            var mapNameSecondResult = CapitalizeFirstLetter(mapScore.Item1.ToLower());
                            var averageKDSecondResult = CalculateAverage(faction2MapStatsKD[mapScore.Item1]);
                            var averageKRSecondResult = CalculateAverage(faction2MapStatsKR[mapScore.Item1]);
                            var averageWRSecondResult = CalculateAverage(faction2MapStatsWR[mapScore.Item1]);
                            var totalMatchesSecondResult = CalculateTotalMatches(faction2MapStatsMatches[mapScore.Item1]);

                            mapAverageKDsSecondResult = CalculateMapAverageKD(Model.PlayerMatchStats, mapScore.Item1, faction2PlayerIds);
                            var AvgKdSecondResult = CalculateAverage(mapAverageKDsSecondResult.Select(kd => new List<double> { kd.Item1 }).ToList());
                            var AvgKrSecondResult = CalculateAverage(mapAverageKDsSecondResult.Select(kr => new List<double> { kr.Item3 }).ToList());
                            var winRatioSecondResult = CalculateWinRatio(mapAverageKDsSecondResult.Select(kd => new List<bool> { kd.Item2 }).ToList());

                            <div class="OverallAnalyzeMap">
                                <img src="~/Map_Icons/de_@(mapScore.Item1.ToLower()).png" width="45" height="45" class="MapIcon" />
                                <span class="OverallAnalyzerMapName">
                                    <span class="AnalyzerMapNameStyle">@mapNameSecondResult:</span>
                                    <span class="AnalyzerResultOverall" style="font-weight:bold;">@totalMatchesSecondResult</span> Matches,
                                    <span class="AnalyzerResultOverall" style="color:@(averageWRSecondResult >= 50 ? "#6BBE49" : "#F20707")">@averageWRSecondResult.ToString("F0")%</span>WR,
                                    <span class="AnalyzerResultOverall" style="color:@(averageKDSecondResult >= 1.00 ? "#6BBE49" : "#F20707")">@averageKDSecondResult.ToString("F2").Replace(",", ".")</span> K/D,
                                    <span class="AnalyzerResultOverall" style="color:@(averageKRSecondResult >= 0.75 ? "#6BBE49" : "#F20707")">@averageKRSecondResult.ToString("F2").Replace(",", ".")</span> K/R
                                </span>
                            </div>

                            <div class="OverallLast20AnalyzeMap">
                                <div style="width:45px; height:45px"></div>

                                <span style="color:#5A0273; font-weight:bold;">Last 20:</span>

                                
                                    <span class="AnalyzerResultOverallLast10">@mapAverageKDsSecondResult.Count()</span><span>Matches,</span>


                                @if (mapAverageKDsSecondResult.Count() != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(winRatioSecondResult >= 50 ? "#6BBE49" : "#F20707")">@winRatioSecondResult.ToString("F0").Replace(",", ".")%</span>
                                    
                                    <span>WR,</span>

                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }

                                @if (AvgKdSecondResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKdSecondResult > 1.00 ? "#6BBE49" : "#F20707")">@AvgKdSecondResult.ToString("F2").Replace(",", ".")</span>

                                    <span>K/D,</span>
                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                }



                                @if (AvgKrSecondResult != 0.00)
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:@(AvgKrSecondResult > 0.75 ? "#6BBE49" : "#F20707")">@AvgKrSecondResult.ToString("F2").Replace(",",".")</span>

                                    <span>K/R</span>
                                }
                                else
                                {
                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                }


                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-12">
                    <p class="text-center subtitle">PLAYERS</p>
                    @foreach (var playerStat in faction2PlayerStats)
                    {
                        var player = faction2Players.FirstOrDefault(p => p.player_id == playerStat.player_id);

                        if (player != null)
                        {
                            var displayedMapsLast20 = playerStat.segments
                            .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                            .OrderByDescending(x => x.label)
                            .ToList();

                            // Make a local copy of MapStatsForSinglePlayer
                            var localMapStatsForSinglePlayer = MapStatsForSinglePlayer.ToList();

                            var mapData = localMapStatsForSinglePlayer
                            .Where(m => displayedMapsLast20.Any(dm => string.Equals(dm.label, m.Item2, StringComparison.OrdinalIgnoreCase)) &&
                            m.Item1.Any(item => item.Item4 == player.player_id))
                            .Select(m => new
                            {
                                m.Item2, // map label
                                PlayerStats = m.Item1.Where(item => item.Item4 == player.player_id).ToList()
                            })
                            .ToList();

                            double PlayerLast20KD = 0.00;
                            double PlayerLast20KR = 0.00;
                            double PlayerLast20WR = 0.00;
                            int PlayerTotalMatchesLast20 = 0;

                            foreach (var map in mapData)
                            {
                                var Kd = map.PlayerStats.Select(k => k.Item1).Sum();
                                var Kr = map.PlayerStats.Select(k => k.Item3).Sum();
                                var Wr = map.PlayerStats.Count(k => k.Item2);

                                PlayerLast20KD += Kd;
                                PlayerLast20KR += Kr;
                                PlayerLast20WR += Wr;
                                PlayerTotalMatchesLast20 += map.PlayerStats.Count;


                            }

                            PlayerLast20KD = PlayerLast20KD / PlayerTotalMatchesLast20;
                            PlayerLast20KR = PlayerLast20KR / PlayerTotalMatchesLast20;
                            PlayerLast20WR = PlayerLast20WR / PlayerTotalMatchesLast20;

                            PlayerLast20WR = PlayerLast20WR * 100;


                            <div class="PlayerAnalyzer player-info" data-player-id="@player.player_id">
                                <div class="PlayerAnalyzerContent">
                                    <img src="~/plus_green.png" alt="Plus-Icon" class="PlayerAnalyzeplus" />
                                    <span>@player.nickname</span>
                                </div>
                            </div>
                            <br />

                            <div class="PlayerMapsAnalyzer hidden" data-player-id="@player.player_id">

                                <div class="CombinedCombinedPlayerStatsAnalyzer">
                                    
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:#ff3c22; font-weight:100;">PLATFORM:</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="font-weight:bold;">@playerStat.lifetime.Matches</span><span>Matches,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(double.Parse(playerStat.lifetime.WinRate) >= 50 ? "#6BBE49" : "#F20707")">@playerStat.lifetime.WinRate%</span><span>WR,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(double.Parse(playerStat.lifetime.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ? "#6BBE49" : "#F20707")">@playerStat.lifetime.AverageKDRatio</span> <span>K/D</span>
                                    @*<span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KR >= 0.75 ? "#6BBE49" : "#F20707")">@PlayerLast20KR.ToString("F2").Replace(",", ".")</span> <span>K/R</span>*@
                                </div>


                                <div class="CombinedLast20PlayerStatsAnalyzer">
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:#ff3c22; font-weight:100;">LAST 20:</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="font-weight:bold;">@PlayerTotalMatchesLast20.ToString("F0")</span><span>Matches,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20WR >= 50 ? "#6BBE49" : "#F20707")">@PlayerLast20WR.ToString("F0")%</span><span>WR,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KD >= 1.00 ? "#6BBE49" : "#F20707")">@PlayerLast20KD.ToString("F2").Replace(",", ".")</span> <span>K/D,</span>
                                    <span class="CombinedLast20PlayerStatsAnalyzer-item" style="color:@(PlayerLast20KR >= 0.75 ? "#6BBE49" : "#F20707")">@PlayerLast20KR.ToString("F2").Replace(",", ".")</span> <span>K/R</span>
                                </div>

                                @{
                                    var displayedMaps = playerStat.segments
                                    .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                                    .OrderByDescending(x => x.label)
                                    .ToList();


                                                                        @foreach (var map in displayedMaps)
                                    {


                                        var PlayerMapStatsLast20 = CalculatePlayerMapAverage(MapStatsForSinglePlayer,player.player_id,map.label);

                                                                            <div class="map-item">

                                                                                <div class="map-item-element">

                                                                                    <img src="~/Map_Icons/de_@(map.label.ToLower()).png" width="45" height="45" class="MapIcon" />
                                                                                <div class="map-item-stats-container">
                                                                                    <span style="font-weight:bold;">@map.label:</span>
                                                                                    
                                                                                    <span class="AnalyzerResultPlayer" style="color:@(int.Parse(map.stats.WinRate) >= 50 ? "#6BBE49" : "#F20707")">
                                                                                        <span style="color:#F2F2F2; font-weight:100;">@map.stats.Matches / </span>
                                                                                        @map.stats.WinRate%
                                                                                    </span> WR,
                                                                                    <span class="AnalyzerResultPlayer" style="color:@(Math.Round(double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 1.00 ? "#6BBE49" : "#F20707")">
                                                                                        @map.stats.AverageKDRatio
                                                                                    </span> K/D,
                                                                                    <span class="AnalyzerResultPlayer" style="color:@(Math.Round(double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 0.75 ? "#6BBE49" : "#F20707")">
                                                                                        @map.stats.AverageKRRatio
                                                                                    </span> K/R
                                                                                    </div>
                                                                                </div>

                                                                                <div class="map-item-element map-item-element-Last20">
                                                                                    <div style="width:45px; height:45px"></div>
                                                                                    <span style="color:#5A0273; font-weight:bold;">Last 20:</span>
                                                                                    <span class="AnalyzerResultOverallLast10">@PlayerMapStatsLast20.totalMatches</span><span>Matches,</span>                                               

                                                                                    @if (PlayerMapStatsLast20.totalMatches != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.winRatio >= 50 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.winRatio.ToString("F0").Replace(",", ".")%</span> 
                                                                                        <span>WR,</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                                }

                                                                                    @if (PlayerMapStatsLast20.avgKD != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.avgKD > 1.00 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.avgKD.ToString("F2").Replace(",", ".")</span>
                                                                                        <span>K/D,</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found,</span>
                                                }

                                                                                    @if (PlayerMapStatsLast20.avgKR != 0.00)
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:@(PlayerMapStatsLast20.avgKR > 0.75 ? "#6BBE49" : "#F20707")">@PlayerMapStatsLast20.avgKR.ToString("F2").Replace(",", ".")</span>
                                                                                        <span>K/R</span>
                                                }
                                                else
                                                {
                                                                                        <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                                }

                                                                                </div>

                                                                            </div>
                                                                            <br />
                                    }

                                    if (displayedMaps.Count != 7)
                                    {
                                        for (int i = displayedMaps.Count; i < 7; i++)
                                        {
                                                                                <div class="map-item" style="height:55px;"></div>
                                                                                <br />
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.player-info').click(function () {
                var playerId = $(this).data('player-id');
                $('.PlayerMapsAnalyzer[data-player-id="' + playerId + '"]').toggleClass('hidden');
            });
        });
    </script>
}

    @functions {

    public double NormalizeFactor(double value, double MinValue, double MaxValue)
    {
        if (MinValue != MaxValue)
        {
            return (value - MinValue) / (MaxValue - MinValue);
        }
        else
        {
            return 0;
        }
    }

    public string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
        return input[0].ToString().ToUpper() + input.Substring(1).ToLower();
    }

    public double CalculateAverage(List<string> ratios)
    {
        if (ratios == null || ratios.Count == 0)
            return 0;
        var total = ratios.Select(ratio => double.Parse(ratio.Replace(",", "."), CultureInfo.InvariantCulture)).Sum();
        return total / ratios.Count;
    }

    public (double avgKD, double avgKR, double winRatio,int totalMatches, string map) CalculatePlayerMapAverage(
    List<(List<(double kd, bool isWinner, double kr, string playerId)>, string map)> mapAverageKDs,
    string playerId,
    string map)
    {
        if (mapAverageKDs == null || !mapAverageKDs.Any())
        {
            return (0.0, 0.0, 0.0,0, map);
        }

        // Filter the list based on the map name
        var mapData = mapAverageKDs
            .Where(m => string.Equals(m.map, map, StringComparison.OrdinalIgnoreCase))
            .SelectMany(m => m.Item1)  // Flatten the list of player stats
            .Where(p => string.Equals(p.playerId, playerId, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (!mapData.Any())
        {
            return (0.0, 0.0, 0.0,0, map);
        }

        // Calculate averages for the filtered list
        double totalKD = mapData.Sum(p => p.kd);
        double totalKR = mapData.Sum(p => p.kr);
        int totalMatches = mapData.Count;
        int wins = mapData.Count(p => p.isWinner);

        double avgKD = totalKD / totalMatches;
        double avgKR = totalKR / totalMatches;

        // Calculate win ratio as a percentage
        double winRatio = (double)wins / totalMatches * 100;

        return (avgKD, avgKR, winRatio,totalMatches, map);
    }



    public int CalculateTotalMatches(List<string> matches)
    {
        if (matches == null || matches.Count == 0)
            return 0;
        return matches.Select(match => int.Parse(match)).Sum();
    }

    public List<(double, bool, double,string)> CalculateMapAverageKD(List<(string playerId, AnalyzerMatchStats.Rootobject)> playerMatchStats, string map, List<string> playerIds)
    {
        var mapAverageKDs = new List<(double, bool, double,string)>();

        foreach (var playerId in playerIds)
        {
            var playerMatches = playerMatchStats
                .Where(p => p.playerId == playerId)
                .SelectMany(p => p.Item2.rounds)
                .Where(r => string.Equals(r.round_stats.Map, $"de_{map.ToLower()}", StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(r => r.match_id)
                .Take(20)
                .ToList();

            foreach (var match in playerMatches)
            {
                var player = match.teams.SelectMany(t => t.players).FirstOrDefault(p => p.player_id == playerId);
                if (player != null && double.TryParse(player.player_stats.KDRatio.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out double kd) &&
                double.TryParse(player.player_stats.KRRatio.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out double kr))
                {
                    // Determine if player was in the winning team
                    var winnerTeamId = match.round_stats.Winner; // Assuming Winner directly gives team_id
                    var isWinner = (winnerTeamId != null && IsPlayerInWinningTeam(match, player));

                    mapAverageKDs.Add((kd, isWinner, kr,player.player_id));
                }
            }
        }

        return mapAverageKDs;
    }

    private bool IsPlayerInWinningTeam(AnalyzerMatchStats.Round match, AnalyzerMatchStats.Player player)
    {
        foreach (var team in match.teams)
        {
            foreach (var teamPlayer in team.players)
            {
                if (teamPlayer.player_id == player.player_id && team.team_id == match.round_stats.Winner)
                {
                    return true;
                }
            }
        }
        return false;
    }


    public double CalculateAverage(List<List<double>> mapAverageKDs)
    {
        if (mapAverageKDs == null || mapAverageKDs.Count == 0)
            return 0;

        int QuantityOfMatches = 0;
        double Avg = 0.00;

        foreach (var playerKD in mapAverageKDs)
        {
            foreach (var kd in playerKD)
            {
                QuantityOfMatches++;
                Avg += kd;
            }
        }

        if (QuantityOfMatches > 0)
        {
            Avg = Avg / QuantityOfMatches;
        }

        return Avg;
    }

    public double CalculateWinRatio(List<List<bool>> mapAverageKDs)
    {
        if (mapAverageKDs == null || mapAverageKDs.Count == 0)
            return 0;

        double wins = 0;
        double QuantityOfMatches = 0;


        foreach (var playerKD in mapAverageKDs)
        {
            foreach (var matchResult in playerKD)
            {
                QuantityOfMatches++;
                if (matchResult == true)
                {
                    wins++;
                }
            }
        }

        return (wins / QuantityOfMatches) * 100;
    }


}