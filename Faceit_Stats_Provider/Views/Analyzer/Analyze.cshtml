@using System.Globalization
@using Faceit_Stats_Provider.ModelsForAnalyzer;
@model Faceit_Stats_Provider.ModelsForAnalyzer.AnalyzerViewModel

<div class="container">
    <div class="row justify-content-center align-items-start">
        @{
            var faction1Leader = Model.Players.teams.faction1.leader;
            var faction1Players = Model.Players.teams.faction1.roster;
            var faction2Leader = Model.Players.teams.faction2.leader;
            var faction2Players = Model.Players.teams.faction2.roster;
            List<string> maps = new List<string> { "DUST2", "MIRAGE", "INFERNO", "NUKE", "VERTIGO", "ANCIENT", "ANUBIS" };

            var faction1PlayerStats = Model.PlayerStats.Where(ps => faction1Players.Any(p => p.player_id == ps.player_id)).ToList();
            var faction2PlayerStats = Model.PlayerStats.Where(ps => faction2Players.Any(p => p.player_id == ps.player_id)).ToList();

            var faction1MapStatsKD = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsWR = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsKR = maps.ToDictionary(map => map, map => new List<string>());
            var faction1MapStatsMatches = maps.ToDictionary(map => map, map => new List<string>());

            var faction2MapStatsKD = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsWR = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsKR = maps.ToDictionary(map => map, map => new List<string>());
            var faction2MapStatsMatches = maps.ToDictionary(map => map, map => new List<string>());

            double Score(string map, string overallKD, string overallMatchesOnMap, string overallWR,string overallKR, string last20KD, string last20WR, string last20MatchesOnMap,string last20KR)
            {
                // Parse the string values to double
                double OverallKD = double.Parse(overallKD.Replace(",", "."), CultureInfo.InvariantCulture);
                double OverallWR = double.Parse(overallWR.Replace(",", "."), CultureInfo.InvariantCulture);
                double OverallMatches = double.Parse(overallMatchesOnMap.Replace(",", "."), CultureInfo.InvariantCulture);

                double OverallKR = double.Parse(overallKR.Replace(",", "."), CultureInfo.InvariantCulture);
                double Last20KD = double.Parse(last20KD.Replace(",", "."), CultureInfo.InvariantCulture);
                double Last20WR = double.Parse(last20WR.Replace(",", "."), CultureInfo.InvariantCulture);

                double LastQuantityOfMatches = double.Parse(last20MatchesOnMap.Replace(",", "."), CultureInfo.InvariantCulture);
                double Last20KR = double.Parse(last20KR.Replace(",", "."), CultureInfo.InvariantCulture);


                double MinOverallKD = 0, MaxOverallKD = 3;
                double MinOverallMatches = 0, MaxOverallMatches = 17000;
                double MinKR = 0, MaxKR = 2;
                double MinWR = 0, MaxWR = 100; 
                double MinLast20Matches = 0, MaxLast20Matches = 100;
                double MinLast20KD = 0, MaxLast20KD = 5;

                // Normalize the values
                double NormalizedOverallKD = NormalizeFactor(OverallKD, MinOverallKD, MaxOverallKD);
                double NormalizedOverallWR = NormalizeFactor(OverallWR, MinWR, MaxWR);
                double NormalizedOverallMatches = NormalizeFactor(OverallMatches, MinOverallMatches, MaxOverallMatches);
                double NormalizedOverallKR = NormalizeFactor(OverallKR, MinKR, MaxKR);

                double NormalizedLast20KD= NormalizeFactor(Last20KD, MinLast20KD, MaxLast20KD);
                double NormalizedLast20WR = NormalizeFactor(Last20WR, MinWR, MaxWR);
                double NormalizedLast20QuantityOfMatches = NormalizeFactor(LastQuantityOfMatches, MinLast20Matches, MaxLast20Matches);
                double NormalizedLast20KR = NormalizeFactor(Last20KR, MinKR, MaxKR);


                double score = (0.35 * NormalizedOverallMatches) + (0.20 * NormalizedOverallWR) + (0.15 * NormalizedLast20WR) + (0.10 * NormalizedLast20QuantityOfMatches) + (0.075 * NormalizedOverallKR) + (0.075 * NormalizedLast20KR)
                + (0.025 * NormalizedOverallKD) + (0.025 * NormalizedLast20KD);

                return score;
            }

            var faction1PlayerIds = faction1Players.Select(p => p.player_id).ToList();
            var faction2PlayerIds = faction2Players.Select(p => p.player_id).ToList();

            foreach (var playerStat in faction1PlayerStats)
            {
                foreach (var segment in playerStat.segments.Where(s => maps.Contains(s.label.ToUpper())))
                {
                    faction1MapStatsKD[segment.label.ToUpper()].Add(segment.stats.AverageKDRatio);
                    faction1MapStatsWR[segment.label.ToUpper()].Add(segment.stats.WinRate);
                    faction1MapStatsKR[segment.label.ToUpper()].Add(segment.stats.AverageKRRatio);
                    faction1MapStatsMatches[segment.label.ToUpper()].Add(segment.stats.Matches);
                }
            }

            foreach (var playerStat in faction2PlayerStats)
            {
                foreach (var segment in playerStat.segments.Where(s => maps.Contains(s.label.ToUpper())))
                {
                    faction2MapStatsKD[segment.label.ToUpper()].Add(segment.stats.AverageKDRatio);
                    faction2MapStatsWR[segment.label.ToUpper()].Add(segment.stats.WinRate);
                    faction2MapStatsKR[segment.label.ToUpper()].Add(segment.stats.AverageKRRatio);
                    faction2MapStatsMatches[segment.label.ToUpper()].Add(segment.stats.Matches);
                }
            }

            List<(string, double)> mapScoresFaction1 = new List<(string, double)>();
            List<(string, double)> mapScoresFaction2 = new List<(string, double)>();

            var mapName = "";
            var mapNameSecond = "";
            double averageKD = 0, averageWR = 0, averageKR = 0, totalMatches = 0,AvgKd=0,winRatio=0,AvgKr=0;
            double averageKDSecond = 0, averageWRSecond = 0, averageKRSecond = 0, totalMatchesSecond = 0,AvgKdSecond=0,winRatioSecond=0,AvgKrSecond=0;

            List<(double, bool, double)> mapAverageKDs = new List<(double,bool,double)>();
            List<(double, bool, double)> mapAverageKDsSecond = new List<(double,bool,double)>();

            foreach (var map in maps)
            {
                 mapName = CapitalizeFirstLetter(map.ToLower());
                 averageKD = CalculateAverage(faction1MapStatsKD[map]);
                 averageWR = CalculateAverage(faction1MapStatsWR[map]);
                 averageKR = CalculateAverage(faction1MapStatsKR[map]);
                 totalMatches = CalculateTotalMatches(faction1MapStatsMatches[map]);

                 mapAverageKDs = CalculateMapAverageKD(Model.PlayerMatchStats, map, faction1PlayerIds);
                 AvgKd = CalculateAverage(mapAverageKDs.Select(kd => new List<double> { kd.Item1 }).ToList());
                 winRatio = CalculateWinRatio(mapAverageKDs.Select(kd => new List<bool> { kd.Item2 }).ToList());
                 AvgKr = CalculateAverage(mapAverageKDs.Select(kr => new List<double> { kr.Item3 }).ToList());

                var CurrenMapScore = Score(map, averageKD.ToString(), totalMatches.ToString(), averageWR.ToString(), averageKR.ToString(), AvgKd.ToString(), winRatio.ToString(), mapAverageKDs.Count().ToString(), AvgKr.ToString());

                mapScoresFaction1.Add((map, CurrenMapScore));


                 mapNameSecond = CapitalizeFirstLetter(map.ToLower());
                 averageKDSecond = CalculateAverage(faction2MapStatsKD[map]);
                 averageWRSecond = CalculateAverage(faction2MapStatsWR[map]);
                 averageKRSecond = CalculateAverage(faction2MapStatsKR[map]);
                 totalMatchesSecond = CalculateTotalMatches(faction2MapStatsMatches[map]);

                 mapAverageKDsSecond = CalculateMapAverageKD(Model.PlayerMatchStats, map, faction2PlayerIds);
                 AvgKdSecond = CalculateAverage(mapAverageKDsSecond.Select(kd => new List<double> { kd.Item1 }).ToList());
                 winRatioSecond = CalculateWinRatio(mapAverageKDsSecond.Select(kd => new List<bool> { kd.Item2 }).ToList());
                 AvgKrSecond = CalculateAverage(mapAverageKDsSecond.Select(kr => new List<double> { kr.Item3 }).ToList());

                var CurrenMapScoreSecond = Score(map, averageKDSecond.ToString(), totalMatchesSecond.ToString(), averageWRSecond.ToString(), averageKRSecond.ToString(), AvgKdSecond.ToString(), winRatioSecond.ToString(), mapAverageKDsSecond.Count().ToString(), AvgKrSecond.ToString());

                mapScoresFaction2.Add((map, CurrenMapScoreSecond));
                        
            }


        }

        <div class="col-md-6">
            <p class="text-center title">Team @faction1Players.FirstOrDefault(p => p.player_id == faction1Leader)?.nickname</p> 

            <div class="row">

                <div class="col-md-12">
                    <p class="text-center subtitle">FAST CHOICE</p>
                </div>

                <div class="col-md-12">
                    <p class="text-center subtitle">OVERALL</p>

                    <div class="maps-container">
                                                
                            <div class="OverallAnalyzeMap">
                                    <img src="~/Map_Icons/de_@(mapName).png" width="45" height="45" class="MapIcon" />
                                                                        <span class="OverallAnalyzerMapName">
                                                                            <span class="AnalyzerMapNameStyle">@mapName:</span>
                                                                            <span class="AnalyzerResultOverall" style="font-weight:bold;">@totalMatches</span> Matches,
                                                                            <span class="AnalyzerResultOverall" style="color:@(averageWR >= 50 ? "#6BBE49" : "#F20707")">@averageWR.ToString("F0")%</span>WR,
                                                                            <span class="AnalyzerResultOverall" style="color:@(averageKD >= 1.00 ? "#6BBE49" : "#F20707")">@averageKD.ToString("F2").Replace(",", ".")</span> K/D
                                                                        </span>
                                                                    </div>

                                                                        <div class="OverallLast20AnalyzeMap">
                                                                            <div style="width:45px; height:45px"></div>
                                                                            <span style="color:#5A0273; font-weight:bold;">Last 10:</span>

                                                                            <span class="AnalyzerResultOverallLast10">@mapAverageKDs.Count()</span><span>Matches,</span>

                                                                            <span class="AnalyzerResultOverallLast10" style="color:@(winRatio >= 50 ? "#6BBE49" : "#F20707")">@winRatio.ToString("F0").Replace(",", ".")%</span> <span>WR,</span>
                                                                            
                                                                                @if(AvgKd!=0.00){
                                                <span class="AnalyzerResultOverallLast10" style="color:@(AvgKd > 1.00 ? "#6BBE49" : "#F20707")">@AvgKd.ToString("F2").Replace(",", ".")</span>

                                                <span>K/D</span>
                                    }else{
                                                                                    <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span> 
                                                                }

                                   
                                                                        
                                                                        </div>                                      
                                                    
                    </div>

                </div>
                <div class="col-md-12">
                    <p class="text-center subtitle">PLAYERS</p>
                    @foreach (var playerStat in faction1PlayerStats)
                    {
                        var player = faction1Players.FirstOrDefault(p => p.player_id == playerStat.player_id);

                        if (player != null)
                        {
                            <div class="PlayerAnalyzer player-info" data-player-id="@player.player_id">
                                <div class="PlayerAnalyzerContent">
                                    <img src="~/plus_green.png" alt="Plus-Icon" class="PlayerAnalyzeplus" />
                                    <span>@player.nickname</span>
                                </div>
                            </div>
                            <br />
                            <div class="PlayerMapsAnalyzer hidden" data-player-id="@player.player_id">
                                @{
                                    var displayedMaps = playerStat.segments
                                    .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                                    .OrderByDescending(x => x.label)
                                    .ToList();

                                    foreach (var map in displayedMaps)
                                    {
                                                                                                <div class="map-item">
                                                                                                    <img src="~/Map_Icons/de_@(map.label.ToLower()).png" width="45" height="45" class="MapIcon" />
                                                                                                    @map.label: <span class="AnalyzerResult" style="color:@(int.Parse(map.stats.WinRate) >= 50 ? "#6BBE49" : "#F20707")"><span style="color:#F2F2F2; font-weight:100;">@map.stats.Matches / </span>@map.stats.WinRate%</span> WR,
                                                                                                    <span class="AnalyzerResult" style="color:@(Math.Round(double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 1.00 ? "#6BBE49" : "#F20707")">@map.stats.AverageKDRatio</span> K/D
                                                                                                </div>
                                                                                                <br />
                                    }

                                    if (displayedMaps.Count != 7)
                                    {
                                        for (int i = displayedMaps.Count; i < 7; i++)
                                        {
                                                                                                    <div class="map-item" style="height:55px;"></div>
                                                                                                    <br />
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <p class="text-center title">Team @faction2Players.FirstOrDefault(p => p.player_id == faction2Leader)?.nickname</p>

            <div class="row">

                <div class="col-md-12">
                    <p class="text-center subtitle">FAST CHOICE</p>
                </div>


                <div class="col-md-12">
                    <p class="text-center subtitle">OVERALL</p>

                    <div class="maps-container">              
                                                                         <div class="OverallAnalyzeMap">
                                                                                            <img src="~/Map_Icons/de_@(mapNameSecond).png" width="45" height="45" class="MapIcon" />
                                                                                            <span class="OverallAnalyzerMapName">
                                                                                                <span class="AnalyzerMapNameStyle">@mapNameSecond:</span>
                                                                                                <span class="AnalyzerResultOverall" style="font-weight:bold;">@totalMatchesSecond</span> Matches, <span class="AnalyzerResultOverall" style="color:@(averageWRSecond >= 50 ? "#6BBE49" : "#F20707")">@averageWRSecond.ToString("F0")%</span> WR,
                                                                                                <span class="AnalyzerResultOverall" style="color:@(averageKDSecond >= 1.00 ? "#6BBE49" : "#F20707")">@averageKDSecond.ToString("F2").Replace(",", ".")</span> K/D
                                                                                            </span>
                                                                                        </div>

                                        <div class="OverallLast20AnalyzeMap">
                                            <div style="width:45px; height:45px"></div>
                                            <span style="color:#5A0273; font-weight:bold;">Last 10:</span>

                                            <span class="AnalyzerResultOverallLast10">@mapAverageKDsSecond.Count()</span><span>Matches,</span>
                                            <span class="AnalyzerResultOverallLast10" style="color:@(winRatioSecond >= 50 ? "#6BBE49" : "#F20707")">@winRatioSecond.ToString("F0").Replace(",", ".")%</span> <span>WR</span>

                                            @if (AvgKdSecond != 0.00)
                                    {
                                                <span class="AnalyzerResultOverallLast10" style="color:@(AvgKdSecond > 1.00 ? "#6BBE49" : "#F20707")">@AvgKdSecond.ToString("F2").Replace(",", ".")</span>

                                                <span>K/D</span>
                                    }
                                    else
                                    {
                                                <span class="AnalyzerResultOverallLast10" style="color:#F20707;">not found</span>
                                    }

                                   

                                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <p class="text-center subtitle">PLAYERS</p>
                    @foreach (var playerStat in faction2PlayerStats)
                    {
                        var player = faction2Players.FirstOrDefault(p => p.player_id == playerStat.player_id);

                        if (player != null)
                        {
                            <div class="PlayerAnalyzer player-info" data-player-id="@player.player_id">
                                <div class="PlayerAnalyzerContent">
                                    <img src="~/plus_green.png" alt="Plus-Icon" class="PlayerAnalyzeplus" />
                                    <span>@player.nickname</span>
                                </div>
                            </div>
                            <br />
                            <div class="PlayerMapsAnalyzer hidden" data-player-id="@player.player_id">
                                @{
                                    var displayedMaps = playerStat.segments
                                    .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
                                    .OrderByDescending(x => x.label)
                                    .ToList();

                                    foreach (var map in displayedMaps)
                                    {
                                                                                                <div class="map-item">
                                                                                                    <img src="~/Map_Icons/de_@(map.label.ToLower()).png" width="45" height="45" class="MapIcon" />
                                                                                                    @map.label: <span class="AnalyzerResult" style="color:@(int.Parse(map.stats.WinRate) >= 50 ? "#6BBE49" : "#F20707")"><span style="color:#F2F2F2; font-weight:100;">@map.stats.Matches / </span>@map.stats.WinRate%</span> WR,
                                                                                                    <span class="AnalyzerResult" style="color:@(Math.Round(double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture), 2) >= 1.00 ? "#6BBE49" : "#F20707")">@map.stats.AverageKDRatio</span> K/D
                                                                                                    
                                                                                                </div>
                                                                                                <br />
                                    }

                                    if (displayedMaps.Count != 7)
                                    {
                                        for (int i = displayedMaps.Count; i < 7; i++)
                                        {
                                                                                                    <div class="map-item" style="height:55px;"></div>
                                                                                                    <br />
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.player-info').click(function () {
                var playerId = $(this).data('player-id');
                $('.PlayerMapsAnalyzer[data-player-id="' + playerId + '"]').toggleClass('hidden');
            });
        });
    </script>
}

@functions {

    public double NormalizeFactor(double value,double MinValue,double MaxValue)
    {
        if (MinValue != MaxValue)
        {
            return (value - MinValue) / (MaxValue - MinValue);
        }
        else{
            return 0;    
        }
    }

    public string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
        return input[0].ToString().ToUpper() + input.Substring(1).ToLower();
    }

    public double CalculateAverage(List<string> ratios)
    {
        if (ratios == null || ratios.Count == 0)
            return 0;
        var total = ratios.Select(ratio => double.Parse(ratio.Replace(",", "."), CultureInfo.InvariantCulture)).Sum();
        return total / ratios.Count;
    }

    public int CalculateTotalMatches(List<string> matches)
    {
        if (matches == null || matches.Count == 0)
            return 0;
        return matches.Select(match => int.Parse(match)).Sum();
    }

    public List<(double, bool,double)> CalculateMapAverageKD(List<(string playerId, AnalyzerMatchStats.Rootobject)> playerMatchStats, string map, List<string> playerIds)
    {
        var mapAverageKDs = new List<(double, bool,double)>();

        foreach (var playerId in playerIds)
        {
            var playerMatches = playerMatchStats
                .Where(p => p.playerId == playerId)
                .SelectMany(p => p.Item2.rounds)
                .Where(r => string.Equals(r.round_stats.Map, $"de_{map.ToLower()}", StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(r => r.match_id)
                .Take(10)
                .ToList();

            foreach (var match in playerMatches)
            {
                var player = match.teams.SelectMany(t => t.players).FirstOrDefault(p => p.player_id == playerId);
                if (player != null && double.TryParse(player.player_stats.KDRatio.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out double kd) && 
                double.TryParse(player.player_stats.KRRatio.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out double kr))
                {
                    // Determine if player was in the winning team
                    var winnerTeamId = match.round_stats.Winner; // Assuming Winner directly gives team_id
                    var isWinner = (winnerTeamId != null && IsPlayerInWinningTeam(match, player));

                    mapAverageKDs.Add((kd, isWinner,kr));
                }
            }
        }

        return mapAverageKDs;
    }

    private bool IsPlayerInWinningTeam(AnalyzerMatchStats.Round match, AnalyzerMatchStats.Player player)
    {
        foreach (var team in match.teams)
        {
            foreach (var teamPlayer in team.players)
            {
                if (teamPlayer.player_id == player.player_id && team.team_id == match.round_stats.Winner)
                {
                    return true;
                }
            }
        }
        return false;
    }


    public double CalculateAverage(List<List<double>> mapAverageKDs)
    {
        if (mapAverageKDs == null || mapAverageKDs.Count == 0)
            return 0;

        int QuantityOfMatches = 0;
        double Avg = 0.00;

        foreach (var playerKD in mapAverageKDs)
        {
            foreach (var kd in playerKD)
            {
                QuantityOfMatches++;
                Avg += kd;
            }
        }

        if (QuantityOfMatches > 0)
        {
            Avg = Avg / QuantityOfMatches;
        }

        return Avg;
    }

    public double CalculateWinRatio(List<List<bool>> mapAverageKDs)
    {

        double wins = 0;
        double QuantityOfMatches = 0;


        foreach (var playerKD in mapAverageKDs)
        {
            foreach (var matchResult in playerKD)
            {
                QuantityOfMatches++;
                if (matchResult == true)
                {
                    wins++;
                }
            }
        }

        return (wins / QuantityOfMatches) * 100;
    }


}