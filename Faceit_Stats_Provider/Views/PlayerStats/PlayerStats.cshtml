@using System.Globalization
@model Faceit_Stats_Provider.Models.PlayerStats

<div class="row mainstatspanel">
    <div class="col-md-4">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <div class="PlayerPanel">

                @if (Model.Playerinfo.avatar.Contains("faceit"))
                {
                    <img src="@Model.Playerinfo.avatar" alt="Player's faceit profile image" width="300" height="300" class="ProfilImage">
                }
                else 
                {
                    <div>No profile Picture</div>
                }
                <div class="PlayerNick">@Model.Playerinfo.nickname</div>
            </div>
        }
    </div>

    <div class="col-md-4">
        <canvas id="faceitlvl" width="250" height="250"></canvas>
        @switch (@Model.Playerinfo.games.csgo.skill_level)
        {
            case 10:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("10", 0.08, "#FE1F00", 0.85);
                    });
                </script>

                break;
            case 9:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("9", 0.08, "#FF6309", 0.418);
                    });
                </script>

                break;

            case 8:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("8", 0.08, "#FF6309", -0.01);;
                    });
                </script>

                break;

            case 7:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("7", 0.08, "#FFC800", -0.65);
                    });
                </script>
                break;
            case 6:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("6", 0.08, "#FFC800", -1.07);
                    });
                </script>
                break;
            case 5:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("5", 0.05, "#FFC800", -1.65);
                    });
                </script>
                break;
            case 4:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("4", 0.03, "#FFC800", -2.47);
                    });
                </script>
                break;
            case 3:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("3", 0.03, "#1CE400", -3.13);
                    });
                </script>
                break;
            case 2:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("2", 0.02, "#1CE400", -3.5);
                    });
                </script>
                break;
            case 1:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("1", 0.01, "#EEE", -3.65);
                    });
                </script>
                break;
        }


        <div class="InfoUnderCanvas">
            @if (@Model.Playerinfo.games.csgo.skill_level == 10)
            {
                <p>MAXIMUM LEVEL HAS BEEN REACHED</p>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="h2">@Model.ErrorMessage</div>
            }
            else if (Model.Playerinfo is null)
            {
                <div class="h4">Loading</div>
            }
            else
            {
                <p class="EloInfoUnderCanvas">ELO: @Model.Playerinfo.games.csgo.faceit_elo</p>
            }
        </div>
    </div>

    <div class="col-md-4">
        <div class="StatsContainer">
            <div class="OverallStats">
                <p class="title">OVERALL</p>
                @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                {
                    <div class="h2">@Model.ErrorMessage</div>
                }
                else if (Model.Playerinfo is null)
                {
                    <div class="h4">Loading</div>
                }
                else
                {
                    <p>MATCHES: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Matches</span></p>

                    <p>WINS: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Wins</span></p>

                    <p>WIN RATIO: <span class="Result" style="color: @(int.Parse(Model.OverallPlayerStatsInfo.lifetime.WinRate) >= 50 ?                                                                                             "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.WinRate%</span></p>

                    <p>HEADSHOTS: <span class="Result" style="color:@(int.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots)>=45 ?  "#6BBE49" : "#F20707")">                                                                    @Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots%</span></p>

                    <p>K/D RATIO: <span class ="Result" style="color: @(double.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1 ?                                                                           "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio</span></p>

                }

            </div>
            <div class="Last20Stats">
                @{
                    void RenderLast20Stats(List<MatchStats.Round> MatchesStats,string nickname, bool include1v1 = false)
                    {                      
                            <p class="title">LAST 20</p>

                            @if (MatchesStats != null)
                        {
                            double totalKdRatio = 0;
                            double totalKrRatio = 0;
                            double totalAverageKills = 0;
                            double totalAverageAssists = 0;
                            double gameCount = 0;
                            double wins = 0;

                                @foreach (var match in MatchesStats)
                            {
                                foreach (var team in match.teams)
                                {
                                    foreach (var player in team.players)
                                    {
                                        if (player.nickname == nickname && (!include1v1 || match.game_mode != "1v1"))
                                        {
                                            double kills = double.Parse(player.player_stats.Kills);
                                            double deaths = double.Parse(player.player_stats.Deaths);
                                            double Assists = double.Parse(player.player_stats.Assists);
                                            double kdRatio = kills / deaths;
                                            double KrRatio = kills / double.Parse(match.round_stats.Rounds); ;
                                            totalAverageKills += kills;
                                            totalAverageAssists += Assists;
                                            totalKrRatio += KrRatio;
                                            totalKdRatio += kdRatio;
                                            gameCount++;

                                            if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.nickname == nickname) ||
                                            match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.nickname == nickname))
                                            {
                                                wins++;
                                            }
                                        }
                                    }
                                }
                            }

                            double averageKdRatio = totalKdRatio / gameCount;
                            double averageKrRatio = totalKrRatio / gameCount;
                            double averageKills = totalAverageKills / gameCount;
                            double averageAssists = totalAverageAssists / gameCount;
                            double winratio = (wins / gameCount) * 100;


                            string averageKdRatioFormatted = averageKdRatio.ToString("F2");
                            string averageKrRatioFormatted = averageKrRatio.ToString("F2");
                            string averageKillsFormatted = averageKills.ToString("F0");
                            string averageAssistsFormatted = averageAssists.ToString("F0");

                                <p>K/D RATIO: <span class="Result" style="color:@(Math.Round(averageKdRatio, 2) >= 1.00 ? "#6BBE49" : "#F20707")">@averageKdRatioFormatted</span></p>

                                <p>K/R RATIO: <span class="Result" style="color:@(averageKrRatio>=0.70 ? "#6BBE49" : "#F20707")">@averageKrRatioFormatted</span></p>

                                <p>WIN RATIO: <span class="Result" style="color:@(winratio>=50 ? "#6BBE49" : "#F20707")">@winratio.ToString("F0")%</span></p>

                                <p>AVG KILLS: <span class="Result" style="color:@(averageKills>=18 ? "#6BBE49" : "#F20707")">@averageKillsFormatted</span></p>

                                <p>AVG ASSISTS: <span class="Result">@averageAssistsFormatted</span></p>
                        }
                    }
                }

                <div id="Last20Stats">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.nickname, false);
                    }
                </div>

                <div id="Last20StatsNo1v1">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.nickname, true);
                    }
                </div>

            </div>

            <div class="SwitchToggle">
                <div class="Include1v1">
                        <p>Include 1v1</p>
                        <label class="switch">
                        <input type="checkbox" id="toggleSwitch" checked>
                        <span class="slider round"></span>
                        </label>
                </div>
                <script>
                    const toggleSwitch = document.getElementById('toggleSwitch');
                    const last20Stats = document.getElementById('Last20Stats');
                    const last20StatsNo1v1 = document.getElementById('Last20StatsNo1v1');

                    toggleSwitch.addEventListener('change', function () {
                        if (this.checked) {
                            last20Stats.style.display = 'block'; 
                            last20StatsNo1v1.style.display = 'none'; 
                        } else {
                            last20Stats.style.display = 'none'; 
                            last20StatsNo1v1.style.display = 'block'; 
                        }
                    });

                    
                    toggleSwitch.dispatchEvent(new Event('change'));
                </script>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-md-12 EloGraph">
        <canvas id="EloChart" height="250"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const ctx = document.getElementById('EloChart');
        var totalMatches = @Model.OverallPlayerStatsInfo.lifetime.Matches;
        var matches = [];
        @{
            List<int?> Last20Elo = new List<int?>();

            foreach (var elo in Model.EloDiff)
            {
                if (elo.elo != null)
                {
                    Last20Elo.Add(int.Parse(elo.elo));
                }
                else
                {
                    Last20Elo.Add(null);
                }
            }

            Last20Elo.RemoveAt(Last20Elo.Count - 1);
        }
       
        @{
            var lastGameElo = 0;
            var twentiethGameElo = 0;
            var eloDifference = 0;
            var maxDifference = 0;

            for (int i = 0; i < 20; i++)
            {
                if (Last20Elo[i] == null)
                {
                    continue;
                }

                else
                {
                    lastGameElo = int.Parse(Last20Elo[i].ToString());
                    break;
                }
            }

            for (int i = 19; i >= 0; i--)
            {
                if (Last20Elo[i] == null)
                {
                    continue;
                }

                else
                {
                    twentiethGameElo = int.Parse(Last20Elo[i].ToString());
                    break;
                }
            }
            if (lastGameElo != null && twentiethGameElo != null)
            { 
                eloDifference = Math.Abs(lastGameElo - twentiethGameElo); 

                for (var i = 1; i < 20; i++)
                {
                    var difference = 0;
                    var elo = Last20Elo[i];
                    if (elo != null)
                    {
                        difference = Math.Abs(lastGameElo - int.Parse(elo.ToString())); 
                    }
                    if (difference > maxDifference)
                    {
                        maxDifference = difference;
                    }
                }
            }
        }

        for (var i = 0; i < 20; i++) {
            matches.push(totalMatches - i);
        }

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: matches.reverse(),
                datasets: [{
                    label: 'ELO ADJUSTMENT LAST 20',
                    data: [@string.Join(",", Last20Elo.Select(item=>item))].reverse(),
                    backgroundColor: 'red',
                    borderColor: 'red',
                    pointHoverRadius: 5,
                    borderWidth: 2
                }]
            },
            options: {

                responsive: true,
                maintainAspectRatio: false,

                scales: {
                    y: {
                        min: @(eloDifference < maxDifference ? Math.Min(twentiethGameElo - maxDifference, lastGameElo - eloDifference) - 100 : lastGameElo - eloDifference - 100),
                        max: @(eloDifference < maxDifference ? Math.Max(lastGameElo + eloDifference, lastGameElo + maxDifference) + 75 : lastGameElo + maxDifference + 75),

                            ticks: {

                                stepSize: 100 ,                    
                                callback: function(value) {
                                        if (value !== 0) {
                                            var roundedValue = Math.round(value / 10) * 10;
                                            return roundedValue.toString();
                                        }
                                        return value;
                                }
                            }
                    }
                }
            }
        });
    </script>
</div>

<div class="row matchespanel">
    <div class="col-md-12 PlayerInfo">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <table class="table matchesTable">
                <thead>
                    <tr>
                        <th>RESULT</th>
                        <th>SCORE</th>
                        <th>MAP</th>
                        <th>MODE</th>
                        <th>TEAM</th>
                        <th>STATS</th>
                        <th>K/R</th>
                        <th>K/D</th>
                        <th>ELO</th>
                    </tr>
                </thead>
                <tbody>

                    @{int index = 0;}

                    @{for (int i = 0; i < Model.EloDiff.Count(); i++)
                        {
                            if(Model.EloDiff[i].elo == null)
                                Model.EloDiff[i].elo = 0.ToString();
                    }}

                    @foreach (var match in Model.Last20MatchesStats)
                    {
                        <tr class="match-row">
                            <td>
                                @if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.nickname == Model.Playerinfo.nickname) ||
                               match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.nickname == Model.Playerinfo.nickname))
                                {
                                    <p style="color:#6BBE49;" class="Result">WIN</p>
                                }
                                else
                                {
                                    <p style="color:#F20707;" class="Result">LOSS</p>
                                }
                            </td>
                            <td>@match.round_stats.Score</td>
                            <td>@match.round_stats.Map</td>
                            <td>@match.game_mode</td>
                            <td>
                                @if (match.teams[0].players.Any(p => p.nickname == Model.Playerinfo.nickname))
                                {
                                    <p>@match.teams[0].team_stats.Team</p>
                                }
                                else if (match.teams[1].players.Any(p => p.nickname == Model.Playerinfo.nickname))
                                {
                                    <p>@match.teams[1].team_stats.Team</p>
                                }
                            </td>
                            <td>
                                @if (match.teams[0].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[0].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                }
                                else if (match.teams[1].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[1].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                }
                            </td>
                            <td>
                                @if (match.teams[0].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[0].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                }
                                else if (match.teams[1].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[1].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                }
                            </td>
                            <td>
                                @if (match.teams[0].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[0].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                }
                                else if (match.teams[1].players.Any(player => player.nickname == Model.Playerinfo.nickname))
                                {
                                    var playerStats = match.teams[1].players.First(player => player.nickname == Model.Playerinfo.nickname).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                }
                            </td>

                            <td> 
                                @{int elodifference = (int.Parse(Model.EloDiff[index].elo) - int.Parse(Model.EloDiff[index+1].elo));}
                                <p class="Result" style="color:@(elodifference == 0 ? "" : (Math.Abs(elodifference) > 400 ? "" : (elodifference > 0 ? "#6BBE49" : "#F20707")))">
                                    @(elodifference == 0 ? "" : (Math.Abs(elodifference) > 400 ? "" : (elodifference > 0 ? "+" : "-")))@Math.Abs(elodifference)
                                </p>
                                @{index++;}
                            </td>

                        </tr>
                        <tr class="scoreboard match-row" style="display: none;">
                            <td colspan="9">
                                <table class="table matchesTableStats">
                                    <thead>
                                        <tr>
                                            <th>PLAYER</th>
                                            <th>KILLS</th>
                                            <th>ASSISTS</th>
                                            <th>DEATHS</th>
                                            <th>K/R</th>
                                            <th>K/D</th>
                                            <th>HEADSHOTS</th>
                                            <th>HEADSHOTS %</th>
                                            <th>MVPs</th>
                                            <th>TRIPLE KILLS</th>
                                            <th>QUADRO KILLS</th>
                                            <th>PENTA KILLS</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var player in match.teams[0].players)
                                        {
                                            <tr>
                                                <td> <a asp-action="PlayerStats" asp-route-nickname="@player.nickname" style="text-decoration:none; color:                                                                                                  @(player.nickname == Model.Playerinfo.nickname ? "#6BBE49" : "white")">@player.nickname</a></td>
                                                <td>@player.player_stats.Kills</td>
                                                <td>@player.player_stats.Assists</td>
                                                <td>@player.player_stats.Deaths</td>
                                                <td>@player.player_stats.KRRatio</td>
                                                <td>@player.player_stats.KDRatio</td>
                                                <td>@player.player_stats.Headshots</td>
                                                <td>@player.player_stats.HeadshotsPercentage</td>
                                                <td>@player.player_stats.MVPs</td>
                                                <td>@player.player_stats.TripleKills</td>
                                                <td>@player.player_stats.QuadroKills</td>
                                                <td>@player.player_stats.PentaKills</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <table class="table matchesTableStats">
                                    <thead>
                                        <tr>
                                            <th>PLAYER</th>
                                            <th>KILLS</th>
                                            <th>ASSISTS</th>
                                            <th>DEATHS</th>
                                            <th>K/R</th>
                                            <th>K/D</th>
                                            <th>HEADSHOTS</th>
                                            <th>HEADSHOTS %</th>
                                            <th>MVPs</th>
                                            <th>TRIPLE KILLS</th>
                                            <th>QUADRO KILLS</th>
                                            <th>PENTA KILLS</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var player in match.teams[1].players)
                                        {
                                            <tr>
                                                <td> <a href="PlayerStats/PlayerStats?nickname=@(player.nickname)" style="text-decoration:none; color: @(player.nickname == Model.Playerinfo.nickname ?                                                                   "#6BBE49" : "white")">@player.nickname</a></td>
                                                <td>@player.player_stats.Kills</td>
                                                <td>@player.player_stats.Assists</td>
                                                <td>@player.player_stats.Deaths</td>
                                                <td>@player.player_stats.KRRatio</td>
                                                <td>@player.player_stats.KDRatio</td>
                                                <td>@player.player_stats.Headshots</td>
                                                <td>@player.player_stats.HeadshotsPercentage</td>
                                                <td>@player.player_stats.MVPs</td>
                                                <td>@player.player_stats.TripleKills</td>
                                                <td>@player.player_stats.QuadroKills</td>
                                                <td>@player.player_stats.PentaKills</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $(".match-row").click(function () {
            $(this).next(".scoreboard").toggle();
        });
    });
</script>
