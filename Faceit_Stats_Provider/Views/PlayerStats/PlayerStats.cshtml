@using System.Globalization
@model Faceit_Stats_Provider.Models.PlayerStats

<div class="row mainstatspanel">
    <div class="col-md-4">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <div class="PlayerPanel">

                @if (Model.Playerinfo.avatar.Contains("faceit"))
                {
                    <a href="https://steamcommunity.com/profiles/@Model.Playerinfo.steam_id_64" target="_blank">

                        @{
                            if (Model.Playerinfo.avatar == "https://distribution.faceit-cdn.net/images/75d3f213-ba21-42f5-b4e5-327b2ff32a0e.jpeg")
                            {
                                                                                            <img src="~/NoPicLogo.png" alt="Player's faceit profile image" width="300" height="300" class="ProfilImage">
                            }
                            else
                            {
                                                                                            <img src="@Model.Playerinfo.avatar" alt="Player's faceit profile image" width="300" height="300" class="ProfilImage">
                            }
                        }
                    </a>
                }
                else
                {
                    <div>No profile Picture</div>
                }
                <div class="PlayerNick">@Model.Playerinfo.nickname</div>

                @if (Model.Playerinfo.player_id == "e40175ca-aed9-49fb-a1e7-d5404a2d8cbc")
                {
                    <div class="DISCLAIMER">DISCLAIMER: THIS USER IS CERTIFIED <span>GAY</span></div>
                }

            </div>
        }
    </div>

    <div class="col-md-4">

        <a href="https://www.faceit.com/en/players/@Model.Playerinfo.nickname" target="_blank">

            <canvas id="faceitlvl" width="250" height="250"></canvas>

        </a>

        @switch (@Model.Playerinfo.games.cs2.skill_level)
        {
            case 10:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("10", 0.08, "#FE1F00", 0.85);
                    });
                </script>

                break;
            case 9:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("9", 0.08, "#FF6309", 0.418);
                    });
                </script>

                break;

            case 8:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("8", 0.08, "#FF6309", -0.01);;
                    });
                </script>

                break;

            case 7:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("7", 0.08, "#FFC800", -0.65);
                    });
                </script>
                break;
            case 6:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("6", 0.08, "#FFC800", -1.07);
                    });
                </script>
                break;
            case 5:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("5", 0.05, "#FFC800", -1.65);
                    });
                </script>
                break;
            case 4:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("4", 0.03, "#FFC800", -2.47);
                    });
                </script>
                break;
            case 3:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("3", 0.03, "#1CE400", -3.13);
                    });
                </script>
                break;
            case 2:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("2", 0.02, "#1CE400", -3.5);
                    });
                </script>
                break;
            case 1:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("1", 0.01, "#EEE", -3.65);
                    });
                </script>
                break;
        }


        <div class="InfoUnderCanvas">
            @if (@Model.Playerinfo.games.cs2.skill_level == 10)
            {
                <p>MAXIMUM LEVEL HAS BEEN REACHED</p>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="h2">@Model.ErrorMessage</div>
            }
            else if (Model.Playerinfo is null)
            {
                <div class="h4">Loading</div>
            }
            else
            {
                <p class="EloInfoUnderCanvas">CS2 ELO: @Model.Playerinfo.games.cs2.faceit_elo</p>
                <p class="EloInfoUnderCanvas2">CS:GO ELO: @Model.Playerinfo.games.csgo.faceit_elo</p>
            }
        </div>
    </div>

    <div class="col-md-4">
        <div class="StatsContainer">
            <div class="OverallStats">
                <p class="title">OVERALL</p>
                @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                {
                    <div class="h2">@Model.ErrorMessage</div>
                }
                else if (Model.Playerinfo is null)
                {
                    <div class="h4">Loading</div>
                }
                else
                {
                    <p>MATCHES: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Matches</span></p>

                    <p>WINS: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Wins</span></p>

                    <p>WIN RATIO: <span class="Result" style="color: @(int.Parse(Model.OverallPlayerStatsInfo.lifetime.WinRate) >= 50 ?                                                                                             "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.WinRate%</span></p>

                    <p>HEADSHOTS: <span class="Result" style="color:@(int.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots)>=45 ?  "#6BBE49" : "#F20707")">                                                                    @Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots%</span></p>

                    <p>K/D RATIO: <span class="Result" style="color: @(double.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1 ?                                                                           "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio</span></p>
                    <p>
                        HIGHEST ELO: <span class="Result">@Model.HighestElo</span>
                    </p>
                }

            </div>
            <div class="Last20Stats">
                @{
                    void RenderLast20Stats(List<MatchStats.Round> MatchesStats, string id, bool RankedGame = false, bool FiveVsFiveGame = false)
                    {
                                                                                    <p class="title">LAST 20</p>

                                                                            @if (MatchesStats != null)
                        {
                            double totalKdRatio = 0;
                            double totalKrRatio = 0;
                            double totalAverageKills = 0;
                            double totalAverageAssists = 0;
                            double gameCount = 0;
                            double wins = 0;

                            int matchCounter = 0;
                            int matchCounterWithWalkovers = 0;

                                                                                @foreach (var match in MatchesStats)
                            {
                                if (match.teams is not null && match.best_of != "Walkover")
                                {
                                    foreach (var team in match.teams)
                                    {
                                        foreach (var player in team.players)
                                        {
                                            if (matchCounter < 20)
                                            {

                                                if (player.player_id == id && (!RankedGame || Model.Last20MatchesStats[matchCounter].calculate_elo == true) && FiveVsFiveGame == false)
                                                {
                                                    double kills = double.Parse(player.player_stats.Kills);
                                                    double deaths = double.Parse(player.player_stats.Deaths);
                                                    double Assists = double.Parse(player.player_stats.Assists);
                                                    double kdRatio = kills / deaths;
                                                    double KrRatio = kills / double.Parse(match.round_stats.Rounds); ;
                                                    totalAverageKills += kills;
                                                    totalAverageAssists += Assists;
                                                    totalKrRatio += KrRatio;
                                                    totalKdRatio += kdRatio;
                                                    gameCount++;

                                                    if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == id) ||
                                                    match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == id))
                                                    {
                                                        wins++;
                                                    }
                                                }

                                                if (player.player_id == id && RankedGame == false && FiveVsFiveGame == true && Model.Last20MatchesStats[matchCounterWithWalkovers].game_mode == "5v5")
                                                {
                                                    double kills = double.Parse(player.player_stats.Kills);
                                                    double deaths = double.Parse(player.player_stats.Deaths);
                                                    double Assists = double.Parse(player.player_stats.Assists);
                                                    double kdRatio = kills / deaths;
                                                    double KrRatio = kills / double.Parse(match.round_stats.Rounds); ;
                                                    totalAverageKills += kills;
                                                    totalAverageAssists += Assists;
                                                    totalKrRatio += KrRatio;
                                                    totalKdRatio += kdRatio;
                                                    gameCount++;

                                                    if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == id) ||
                                                    match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == id))
                                                    {
                                                        wins++;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                    matchCounter++;
                                }
                                matchCounterWithWalkovers++;
                            }

                            double averageKdRatio = totalKdRatio / gameCount;
                            double averageKrRatio = totalKrRatio / gameCount;
                            double averageKills = totalAverageKills / gameCount;
                            double averageAssists = totalAverageAssists / gameCount;
                            double winratio = (wins / gameCount) * 100;


                            string averageKdRatioFormatted = averageKdRatio.ToString("F2");
                            string averageKrRatioFormatted = averageKrRatio.ToString("F2");
                            string averageKillsFormatted = (averageKills % 1 >= 0.5) ? Math.Ceiling(averageKills).ToString("F0") : averageKills.ToString("F0");
                            string averageAssistsFormatted = averageAssists.ToString("F0");

                                                                                        <p>K/D RATIO: <span class="Result" style="color:@(Math.Round(averageKdRatio, 2) >= 1.00 ? "#6BBE49" : "#F20707")">@averageKdRatioFormatted</span></p>

                                                                                        <p>K/R RATIO: <span class="Result" style="color:@(averageKrRatio>=0.70 ? "#6BBE49" : "#F20707")">@averageKrRatioFormatted</span></p>

                                                                                        <p>WIN RATIO: <span class="Result" style="color:@(winratio>=50 ? "#6BBE49" : "#F20707")">@winratio.ToString("F0")%</span></p>

                                                                                        <p>AVG KILLS: <span class="Result" style="color:@(averageKills>=16 ? "#6BBE49" : "#F20707")">@averageKillsFormatted</span></p>

                                                                                        <p>AVG ASSISTS: <span class="Result">@averageAssistsFormatted</span></p>

                                                                                        <span>
                                                                                            @{
                                    int balance = 9999;
                                    int lastEloToRetrieve = 0;
                                    int firstEloToRetrieve = 0;

                                    if (Model.EloDiff.Count() >= 20)
                                    {
                                        if (Model.EloDiff[19].elo is null)
                                        {
                                            for (int i = 19; i >= 0; i--)
                                            {
                                                if (Model.EloDiff[i].elo is not null)
                                                {
                                                    lastEloToRetrieve = int.Parse(Model.EloDiff[i].elo.ToString());
                                                    break;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            lastEloToRetrieve = int.Parse(Model.EloDiff[19].elo.ToString());
                                        }

                                        if (Model.EloDiff[0].elo is null)
                                        {
                                            for (int j = 0; j <= 19; j++)
                                            {
                                                if (Model.EloDiff[j].elo is not null)
                                                {
                                                    firstEloToRetrieve = int.Parse(Model.EloDiff[j].elo.ToString());
                                                    break;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            firstEloToRetrieve = int.Parse(Model.EloDiff[0].elo.ToString());
                                        }

                                        balance = firstEloToRetrieve - lastEloToRetrieve;
                                    }
                                                                                            }
                                                                                        </span>

                                                                                        <p>
                                                                                            BALANCE: @{
                                    if (balance != 9999)
                                    {
                                                                                                                                                                <span class="Result" style="color: @(balance > 0 ? "#6BBE49" : (balance < 0 ? "#F20707" : "white"))">
                                                                                                                                                                    @(
                                        balance > 0 ? '+' : (balance < 0 ? "-" : "")
                                                                                                                                                                        )@Math.Abs(balance)
                                                                                                                                                                </span>
                                    }

                                    else
                                    {
                                                                                                                                                                <span class="Result">-</span>
                                    }
                                                                                            }
                                                                                        </p>


                        }
                    }
                }

                <div id="Last20Stats">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, false,false);
                    }
                </div>

                <div id="RankedGames">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, true,false);
                    }
                </div>

                <div id="5v5MatchesOnlyStats">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, false, true);
                    }
                </div>

            </div>

            <div class="SwitchToggle">

                <div class="Ranked5v5Games">
                    <p>RANKED GAMES</p>
                    <label class="switch">
                        <input type="checkbox" id="toggleSwitch">
                        <span class="slider round"></span>
                    </label>
                </div>

                <div class="WalkoverGames">
                    <p> WALKOVERS</p>
                    <label class="switch">
                        <input type="checkbox" id="toggleWalkoverSwitch">
                        <span class="slider round"></span>
                    </label>
                </div>

                <div class="Only5v5Games">
                    <p>ONLY 5V5</p>
                    <label class="switch">
                        <input type="checkbox" id="toggle5V5Games">
                        <span class="slider round"></span>
                    </label>
                </div>

                <script>
                    const toggleSwitch = document.getElementById('toggleSwitch');
                    const toggle5V5Games = document.getElementById('toggle5V5Games');
                    const last20Stats = document.getElementById('Last20Stats');
                    const rankedGames = document.getElementById('RankedGames');
                    const All5v5games = document.getElementById('5v5MatchesOnlyStats');

                    const v5ALLmatches = document.getElementsByClassName('v5MatchALL');
                    const v5Elo = document.getElementsByClassName('v5Match');
                    const v1TableMatches = document.getElementsByClassName('UnrankedMatch');

                    toggleSwitch.addEventListener('change', function () {
                        if (this.checked) {
                            last20Stats.style.display = 'none';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'block';

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'none';
                            }
                            for (let i = 0; i < v5ALLMatches.length; i++) {
                                v5ALLMatches[i].style.display = 'none';
                            }

                            for (let i = 0; i < v5Elo.length; i++) {
                                v5Elo[i].style.display = 'block';
                            }

                        } else {
                            last20Stats.style.display = 'block';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'none';

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'table-row';
                            }
                              for (let i = 0; i < v5ALLmatches.length; i++) {
                                v5ALLmatches[i].style.display = 'table-row';
                            }

                            toggle5V5Games.checked = false;
                        }
                    });

                    toggle5V5Games.addEventListener('change', function () {
                        if (this.checked) {
                            last20Stats.style.display = 'none';
                            All5v5games.style.display = 'block';
                            rankedGames.style.display = 'none';

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'none';
                            }

                        } else {
                            last20Stats.style.display = 'block';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'none';

                                for (let i = 0; i < v1TableMatches.length; i++) {
                                    v1TableMatches[i].style.display = 'table-row';
                                }

                                toggleSwitch.checked = false;


                        }
                    });

                    // Set the initial state based on the default checked attributes
                    toggleSwitch.dispatchEvent(new Event('change'));
                    toggle5V5Games.dispatchEvent(new Event('change'));
                </script>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-md-12 EloGraph">
        <canvas id="EloChart" height="250"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const ctx = document.getElementById('EloChart');
        var totalMatches = @Model.OverallPlayerStatsInfo.lifetime.Matches;
        var matches = [];
        @{
            List<int?> Last20Elo = new List<int?>();

            foreach (var elo in Model.EloDiff)
            {
                if (elo.elo != null)
                {
                    Last20Elo.Add(int.Parse(elo.elo.ToString()));
                }
                else
                {
                    Last20Elo.Add(null);
                }
            }

            Last20Elo.RemoveAt(Last20Elo.Count - 1);
        }

        @{
            var lastGameElo = 0;
            var twentiethGameElo = 0;
            var eloDifference = 0;
            var maxDifference = 0;

            if (Last20Elo.Count() < 20)
            {

            }
            else
            {

                for (int i = 0; i < 20; i++)
                {
                    if (Last20Elo[i] == null)
                    {
                        continue;
                    }

                    else
                    {
                        lastGameElo = int.Parse(Last20Elo[i].ToString());
                        break;
                    }
                }

                for (int i = 19; i >= 0; i--)
                {
                    if (Last20Elo[i] == null)
                    {
                        continue;
                    }

                    else
                    {
                        twentiethGameElo = int.Parse(Last20Elo[i].ToString());
                        break;
                    }
                }
                if (lastGameElo != null && twentiethGameElo != null)
                {
                    eloDifference = Math.Abs(lastGameElo - twentiethGameElo);

                    for (var i = 1; i < 20; i++)
                    {
                        var difference = 0;
                        var elo = Last20Elo[i];
                        if (elo != null)
                        {
                            difference = Math.Abs(lastGameElo - int.Parse(elo.ToString()));
                        }
                        if (difference > maxDifference)
                        {
                            maxDifference = difference;
                        }
                    }
                }
            }
        }

                                                        for (var i = 0; i < 20; i++) {
            matches.push(totalMatches - i);
        }

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: matches.reverse(),
                datasets: [{
                    label: 'ELO ADJUSTMENT LAST 20',
                    data: [@string.Join(",", Last20Elo.Select(item=>item))].reverse(),
                    backgroundColor: 'red',
                    borderColor: 'red',
                    pointHoverRadius: 5,
                    borderWidth: 2
                }]
            },
            options: {

                responsive: true,
                maintainAspectRatio: false,

                scales: {
                    y: {
                        min: @(eloDifference < maxDifference ? Math.Min(twentiethGameElo - maxDifference, lastGameElo - eloDifference) - 100 : lastGameElo - eloDifference - 100),
                        max: @(eloDifference < maxDifference ? Math.Max(lastGameElo + eloDifference, lastGameElo + maxDifference) + 75 : lastGameElo + maxDifference + 75),

                        ticks: {

                            stepSize: 100,
                            callback: function (value) {
                                if (value !== 0) {
                                    var roundedValue = Math.round(value / 10) * 10;
                                    return roundedValue.toString();
                                }
                                return value;
                            }
                        }
                    }
                }
            }
        });
    </script>
</div>

<div class="row matchespanel">
    <div class="col-md-12 PlayerInfo">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <table class="table matchesTable maintable">
                <thead>
                    <tr>
                        <th>RESULT</th>
                        <th>SCORE</th>
                        <th>MAP</th>
                        <th>MODE</th>
                        <th>TEAM</th>
                        <th>STATS</th>
                        <th>K/R</th>
                        <th>K/D</th>
                        <th>ELO</th>
                    </tr>
                </thead>
                <tbody>

                    @{
                        int index = 0;
                    }

                    @{
                        for (int i = 0; i < Model.EloDiff.Count(); i++)
                        {
                            if (Model.EloDiff[i].elo == null)
                                Model.EloDiff[i].elo = 0.ToString();
                        }
                    }

                    @{
                        int matchCounter = 0;
                    }

                    @foreach (var match in Model.Last20MatchesStats)
                    {
                        void RenderMatchInTable()
                        {
                            @if (match.round_stats is not null)
                            {
                            <td>
                                    @if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == Model.Playerinfo.player_id) ||
                                   match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                    {
                                    <p style="color:#6BBE49;" class="Result">WIN</p>
                                    }
                                    else
                                    {
                                    <p style="color:#F20707;" class="Result">LOSS</p>
                                    }

                            </td>
                            <td>@match.round_stats.Score</td>
                            <td>@match.round_stats.Map</td>
                            <td>@match.game_mode</td>
                            <td>
                                    @if (match.teams[0].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                    {
                                    <p>@match.teams[0].team_stats.Team</p>
                                    }
                                    else if (match.teams[1].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                    {
                                    <p>@match.teams[1].team_stats.Team</p>
                                    }
                            </td>
                            <td>
                                    @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                    }
                                    else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                    }
                            </td>
                            <td>
                                    @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                    }
                                    else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                    }
                            </td>
                            <td>
                                    @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                    }
                                    else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                    {
                                        var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                    <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                    }
                            </td>

                            <td>
                                    @{
                                        int elodifference = (int.Parse(Model.EloDiff[index].elo.ToString()) - int.Parse(Model.EloDiff[index + 1].elo.ToString()));
                                    }
                                <p class="Result" style="color:@(elodifference == 0 ? "" : (Math.Abs(elodifference) > 400 ? "" : (elodifference > 0 ? "#6BBE49" : "#F20707")))">
                                        @(
                                            elodifference == 0 ? "" : (Math.Abs(elodifference) > 400 ? "" : (elodifference > 0 ? "+" : "-"))
                                            )@Math.Abs(elodifference)
                                </p>
                                    @{
                                        index++;
                                    }
                            </td>
                            }

                            else
                            {
                                <td>
                                        @{
                                            if (match.competition_name.ToString().Contains("BLAST"))
                                            {
                                                                                                        <p class="Result">BLAST</p>
                                            }

                                            else
                                            {
                                                                                                        <p class="Result">Walkover</p>
                                            }
                                        }
                                </td>
                                <td></td>
                                <td>
                                    <p class="Result">@match.competition_name</p>
                                </td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>
                                    <a href="https://www.faceit.com/en/cs2/room/@match.match_id" target="_blank">
                                        <img src="/niewypelnione2.png" alt="Icon" height="25px" width="25px" />
                                    </a>
                                </td>
                                
                            }
                        }



                        if (Model.Last20MatchesStats[matchCounter].best_of == "Walkover" && !Model.Last20MatchesStats[matchCounter].competition_name.ToString().Contains("BLAST"))
                        {
                        <tr class="match-row Walkover" style="display: none;">

                                @{
                                    RenderMatchInTable();
                                }
                            <script>
                                const WalkoverGame = document.getElementsByClassName('Walkover');

                                toggleWalkoverSwitch.addEventListener('change', function () {
                                    if (this.checked) {
                                        for (let i = 0; i < WalkoverGame.length; i++) {
                                            WalkoverGame[i].style.display = 'table-row';
                                        }
                                    } else {
                                        for (let i = 0; i < WalkoverGame.length; i++) {
                                            WalkoverGame[i].style.display = 'none';
                                        }
                                    }
                                });

                                toggleWalkoverSwitch.dispatchEvent(new Event('change'));
                            </script>
                        </tr>
                        }

                        else if (Model.Last20MatchesStats[matchCounter].best_of == "Walkover" && Model.Last20MatchesStats[matchCounter].competition_name.ToString().Contains("BLAST"))
                        {
                        <tr class="match-row Walkover BLAST" style="display: none;">

                                @{
                                    RenderMatchInTable();
                                }
                        </tr>


                        <script>
                            const WalkoverGame = document.getElementsByClassName('BLAST');

                            toggleWalkoverSwitch.addEventListener('change', function () {
                                if (this.checked) {
                                    for (let i = 0; i < WalkoverGame.length; i++) {
                                        WalkoverGame[i].style.display = 'table-row';
                                    }
                                } else {
                                    for (let i = 0; i < WalkoverGame.length; i++) {
                                        WalkoverGame[i].style.display = 'none';
                                    }
                                }
                            });

                            toggleWalkoverSwitch.dispatchEvent(new Event('change'));
                        </script>

                        }

                        else if (Model.Last20MatchesStats[matchCounter].calculate_elo == true)
                        {
                        <tr class="match-row v5Match">
                                @{
                                    RenderMatchInTable();
                                }
                        </tr>

                        }

                        else if (Model.Last20MatchesStats[matchCounter].game_mode=="5v5")
                        {
                        <tr class="match-row v5MatchALL">
                                @{
                                    RenderMatchInTable();
                                }
                        </tr>

                        }

                        else
                        {
                        <tr class="match-row UnrankedMatch">
                                @{
                                    RenderMatchInTable();
                                }
                        </tr>

                        }

                    <tr class="scoreboard match-row" style="display: none;">
                        <td colspan="9">
                            <table class="table matchesTableStats">
                                <thead>
                                    <tr>
                                        <th>PLAYER</th>
                                        <th>KILLS</th>
                                        <th>ASSISTS</th>
                                        <th>DEATHS</th>
                                        <th>K/R</th>
                                        <th>K/D</th>
                                        <th class="TableResult">HEADSHOTS</th>
                                        <th>HEADSHOTS %</th>
                                        <th>MVPs</th>
                                        <th>TRIPLE KILLS</th>
                                        <th>QUADRO KILLS</th>
                                        <th>PENTA KILLS</th>
                                    </tr>
                                </thead>
                                <tbody>
                                        @if (match.teams is not null)
                                        {
                                            @foreach (var player in match.teams[0].players)
                                            {
                                            <tr>
                                                <td style="text-align:left;"> <a asp-action="PlayerStats" asp-route-nickname="@player.nickname" style="text-decoration:none; color:                                                                                                  @(player.player_id == Model.Playerinfo.player_id ? "#6BBE49" : "white")">@player.nickname</a></td>
                                                <td style="text-align:center;">@player.player_stats.Kills</td>
                                                <td style="text-align:center;">@player.player_stats.Assists</td>
                                                <td style="text-align:center;">@player.player_stats.Deaths</td>
                                                <td style="text-align:center;">@player.player_stats.KRRatio</td>
                                                <td style="text-align:center;">@player.player_stats.KDRatio</td>
                                                <td style="text-align:center;">@player.player_stats.Headshots</td>
                                                <td style="text-align:center;">@player.player_stats.HeadshotsPercentage</td>
                                                <td style="text-align:center;">@player.player_stats.MVPs</td>
                                                <td style="text-align:center;">@player.player_stats.TripleKills</td>
                                                <td style="text-align:center;">@player.player_stats.QuadroKills</td>
                                                <td style="text-align:center;">@player.player_stats.PentaKills</td>
                                            </tr>
                                            }
                                        }
                                </tbody>
                            </table>
                            <table class="table matchesTableStats">
                                <thead>
                                    <tr>
                                        <th>PLAYER</th>
                                        <th>KILLS</th>
                                        <th>ASSISTS</th>
                                        <th>DEATHS</th>
                                        <th>K/R</th>
                                        <th>K/D</th>
                                        <th>HEADSHOTS</th>
                                        <th>HEADSHOTS %</th>
                                        <th>MVPs</th>
                                        <th>TRIPLE KILLS</th>
                                        <th>QUADRO KILLS</th>
                                        <th>PENTA KILLS</th>
                                    </tr>
                                </thead>
                                <tbody>
                                        @if (match.teams is not null)
                                        {
                                            @foreach (var player in match.teams[1].players)
                                            {
                                            <tr>
                                                <td style="text-align:left;"> <a asp-action="PlayerStats" asp-route-nickname="@player.nickname" style="text-decoration:none; color:                                                                                                  @(player.player_id == Model.Playerinfo.player_id ? "#6BBE49" : "white")">@player.nickname</a></td>
                                                <td style="text-align:center;">@player.player_stats.Kills</td>
                                                <td style="text-align:center;">@player.player_stats.Assists</td>
                                                <td style="text-align:center;">@player.player_stats.Deaths</td>
                                                <td style="text-align:center;">@player.player_stats.KRRatio</td>
                                                <td style="text-align:center;">@player.player_stats.KDRatio</td>
                                                <td style="text-align:center;">@player.player_stats.Headshots</td>
                                                <td style="text-align:center;">@player.player_stats.HeadshotsPercentage</td>
                                                <td style="text-align:center;">@player.player_stats.MVPs</td>
                                                <td style="text-align:center;">@player.player_stats.TripleKills</td>
                                                <td style="text-align:center;">@player.player_stats.QuadroKills</td>
                                                <td style="text-align:center;">@player.player_stats.PentaKills</td>
                                            </tr>
                                            }
                                        }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                        matchCounter++;
                    }
                </tbody>
            </table>

            <div id="matchesList">

                @foreach (var match in Model.MatchHistory.items)
                {
                    <div class="match-item">
                    </div>
                }
            </div>

            <button id="loadMoreButton" class="load-more-button">LOAD MORE</button>

            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


            <script>
                var nickname = '@Model.Playerinfo.nickname';
                var playerID = '@Model.Playerinfo.player_id';
                var offset = @Model.Last20MatchesStats.Count();
                var isOffsetModificated = false;

                if(offset%2==1)
                {
                    offset--;
                    isOffsetModificated = true;
                }

                function loadMoreMatches() {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("LoadMoreMatches", "PlayerStats")',
                        data: { nickname: nickname, offset: offset, playerID: playerID, isOffsetModificated: isOffsetModificated },
                        success: function (data) {
                            $('.maintable').css('margin-bottom', '6%');
                            $('#matchesList').append(data);
                            if (data.length < 10) {
                                $('#loadMoreButton').hide();
                            }

                            // Zwiększ offset o 20 po udanym załadowaniu
                            offset += 10;

                            // Zaktualizuj wartość offset w zmiennej JavaScript
                            updateOffset(offset);
                        },
                        error: function () {
                            alert('Error loading more matches.');
                        }
                    });
                }

                $('#loadMoreButton').click(function () {
                    // Przekaż aktualną wartość offset jako parametr w zapytaniu AJAX
                    loadMoreMatches();
                });

                // Funkcja do aktualizacji offset w zmiennej JavaScript
                function updateOffset(newOffset) {
                    
                    if (isOffsetModificated) {
                        offset++;
                    }

                    offset = newOffset;
                }
            </script>

        }
    </div>
</div>

<div class="MapStatsRow">

    @{
        List<string> maps = new List<string>() {"DUST2", "MIRAGE", "INFERNO", "NUKE", "VERTIGO", "ANCIENT", "ANUBIS" };

        var displayedMaps = Model.OverallPlayerStatsInfo.segments
        .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
        .OrderByDescending(x => x.label)
        .ToList();
    }

    <div class="col-md-6 MapsRadarChart">
        <canvas id="MapsPlayedChart"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        var labels = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => map.label)))');
        var matches = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => map.stats.Matches)))');
        var KD = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
        var KR = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');

        var data = {
            labels: labels,
            datasets: [
                {
                    label: "K/D",
                    data: KD,
                    backgroundColor: "rgba(200, 0, 0, 0.2)",
                    borderColor: "rgba(200, 0, 0, 1)",
                    borderWidth: 2,
                    pointBackgroundColor: "rgba(200, 0, 0, 1)",
                    pointBorderColor: "#fff",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(200, 0, 0, 1)"
                },
                {
                    label: "K/R",
                    data: KR,
                    backgroundColor: "rgba(0, 0, 200, 0.2)",
                    borderColor: "rgba(0, 0, 200, 1)",
                    borderWidth: 2,
                    pointBackgroundColor: "rgba(0, 0, 200, 1)",
                    pointBorderColor: "#fff",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(0, 0, 200, 1)"
                }
            ]
        };

        var radarChart = null;

        function animateChartOnScroll() {
            var chartContainer = $(".MapsRadarChart");
            var scrollPosition = $(window).scrollTop() + $(window).height();
            var containerPosition = chartContainer.offset().top;

            if (scrollPosition > containerPosition && radarChart === null) {
                radarChart = new Chart($("#MapsPlayedChart"), {
                    type: 'radar',
                    data: data,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1500,
                            easing: 'easeOutQuart'
                        },
                        scale: {
                            ticks: {
                                beginAtZero: true,
                                stepSize: 0.5 // Adjust the step size of the ticks as needed
                            },
                            pointLabels: {
                                fontSize: 14
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 16
                                    }
                                }
                            }
                        }
                    }
                });

                updateScaleOptions();
            }
        }

        function updateScaleOptions() {
            var maxKD = Math.max.apply(null, KD);
            var maxKR = Math.max.apply(null, KR);
            var max = Math.max(maxKD, maxKR);

            radarChart.options.scale.ticks.max = max;
            radarChart.update(); // Update the chart with the new scale options
        }

        $(document).ready(function () {
            $(window).on("scroll", animateChartOnScroll);

            animateChartOnScroll();
        });
    </script>


    <div class="col-md-6 ActiveFaceitMapPoolContainer">

        <div class="TableMapTitle"><h2>*FACEIT ACTIVE MAP POOL</h2></div>

        <div class="table-container">

            <table class="table MapsTable">
                <thead>
                    <tr>
                        <th>IMG</th>
                        <th>MAP</th>
                        <th>MATCHES</th>
                        <th>WIN RATE</th>
                        <th>AVG K/D</th>
                        <th>AVG K/R</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var map in displayedMaps)
                    {
                        <tr class="map-row">
                            <td>
                                <img src="@map.img_small" />
                            </td>

                            <td>@map.label</td>
                            <td>@map.stats.Matches</td>

                            <td>
                                <p class="Result" style="color: @(double.Parse(map.stats.WinRate) >= 50.00 ? "#6BBE49" : "#F20707")">@map.stats.WinRate%</p>
                            </td>
                            <td>
                                <p class="Result" style="color: @(double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ? "#6BBE49" : "#F20707")">@map.stats.AverageKDRatio</p>
                            </td>
                            <td>
                                <p class="Result" style="color: @(double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ? "#6BBE49" : "#F20707")">@map.stats.AverageKRRatio</p>
                            </td>
                        </tr>

                        <tr class="MapStatsInfo" style="display: none;">
                            <td colspan="8">
                                <table class="table MapsTable">
                                    <thead>
                                        <tr>
                                            <th>AVERAGE KILLS</th>
                                            <th>AVERAGE DEATHS</th>
                                            <th>AVERAGE ASSISTS</th>
                                            <th>HEADSHOTS PER GAME</th>
                                            <th>AVERAGE HEADSHOTS %</th>
                                            <th>AVERAGE TRIPLE</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <tr>
                                            <td><p class="Result">@map.stats.AverageKills</p></td>
                                            <td><p class="Result">@map.stats.AverageDeaths</p></td>
                                            <td><p class="Result">@map.stats.AverageAssists</p></td>
                                            <td><p class="Result">@map.stats.HeadshotsperMatch</p></td>
                                            <td><p class="Result">@map.stats.AverageHeadshots</p></td>
                                            <td><p class="Result">@map.stats.AverageTripleKills</p></td>
                                        </tr>

                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <script>
                $(document).ready(function () {
                    var tableContainer = $(".table-container");

                    $(window).scroll(function () {
                        var scrollPosition = $(this).scrollTop() + $(this).height();
                        var tablePosition = tableContainer.offset().top;

                        if (scrollPosition > tablePosition) {
                            tableContainer.addClass("visible");
                        }
                    });
                });
            </script>
        </div>
    </div>
</div>

<!-- <div class="row">
    <div class="col-12 button-container">
        <button class="SeeCompleteStatistics-button">SEE COMPLETE STATISTICS</button>
    </div>
</div> -->

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $(".match-row").click(function () {
            $(this).next(".scoreboard").toggle();
        });
    });
</script>

<script>
    $(document).ready(function () {
        $(".map-row").click(function () {
            $(this).next(".MapStatsInfo").toggle();
        });
    });
</script>