@using System.Globalization
@using Newtonsoft.Json
@model Faceit_Stats_Provider.Models.PlayerStats

<div class="row mainstatspanel">
    <div class="col-md-4">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <div class="PlayerPanel">

                @if (Model.Playerinfo.avatar.ToLower().Contains("faceit") || Model.Playerinfo.avatar == "" || Model.Playerinfo.avatar == null)
                {
                    <a href="https://steamcommunity.com/profiles/@Model.Playerinfo.steam_id_64" target="_blank">

                        @{
                            if (Model.Playerinfo.avatar == "https://distribution.faceit-cdn.net/images/75d3f213-ba21-42f5-b4e5-327b2ff32a0e.jpeg" || Model.Playerinfo.avatar == "" || Model.Playerinfo.avatar == null)
                            {
                                                                                                                    <img src="/Assets/NoPicLogo.png" alt="Player's faceit profile image" width="300" height="300" class="ProfilImage">
                            }
                            else
                            {
                                                                                                                    <img src="@Model.Playerinfo.avatar" alt="Player's faceit profile image" width="300" height="300" class="ProfilImage">
                            }
                        }
                    </a>
                }
                else
                {
                    <div>No profile Picture</div>
                }


                <div class="PlayerNick">
                    @Model.Playerinfo.nickname
                    <span class="CountryFlag">
                        <img src="https://flagsapi.com/@(Model.Playerinfo.country.ToUpper())/shiny/64.png" width="24px" height="24px">

                        @if (Model.Playerinfo.player_id == "2faca739-6ec4-4e33-8ee2-e326c6590b53")
                        {
                            <span class="WebOwner">OWNER</span>
                        }

                    </span>
                </div>



                @if (Model.Playerinfo.player_id == "e40175ca-aed9-49fb-a1e7-d5404a2d8cbc")
                {
                    <div class="DISCLAIMER">DISCLAIMER: THIS USER IS CERTIFIED <span>GAY</span></div>
                }

            </div>
        }
    </div>

    <div class="col-md-4">

        <a href="https://www.faceit.com/en/players/@Model.Playerinfo.nickname" target="_blank" style="pointer-events: none;">

            <canvas id="faceitlvl" width="250" height="250" style="pointer-events: auto;">
            </canvas>

        </a>
        @{
            int LevelPossessed = 1;

            int? request = null;

            if (Model.Playerinfo.games.csgo != null)
            {
                request = Model.Playerinfo.games.csgo.faceit_elo;
            }

            if (Model.Playerinfo != null && Model.Playerinfo.games != null)
            {
                if (Model.Playerinfo.games.cs2 == null)
                {
                    LevelPossessed = Model.Playerinfo.games.csgo.skill_level;
                    request = Model.Playerinfo.games.csgo.faceit_elo;
                }
                else
                {
                    LevelPossessed = Model.Playerinfo.games.cs2.skill_level;
                    request = Model.Playerinfo.games.cs2.faceit_elo;
                }
            }

            else
            {
                                                                                                    <p>Player information or game stats are not available.</p>
            }
        }

        @switch (LevelPossessed)
        {
            case 10:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("10", 0.08, "#FE1F00", 0.85);
                    });
                </script>

                break;
            case 9:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("9", 0.08, "#FF6309", 0.418);
                    });
                </script>

                break;

            case 8:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("8", 0.08, "#FF6309", -0.01);;
                    });
                </script>

                break;

            case 7:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("7", 0.08, "#FFC800", -0.65);
                    });
                </script>
                break;
            case 6:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("6", 0.08, "#FFC800", -1.07);
                    });
                </script>
                break;
            case 5:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("5", 0.05, "#FFC800", -1.65);
                    });
                </script>
                break;
            case 4:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("4", 0.03, "#FFC800", -2.47);
                    });
                </script>
                break;
            case 3:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("3", 0.03, "#1CE400", -3.13);
                    });
                </script>
                break;
            case 2:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("2", 0.02, "#1CE400", -3.5);
                    });
                </script>
                break;
            case 1:
                <script>
                    window.addEventListener('load', function () {
                        generatelvl("1", 0.01, "#EEE", -3.65);
                    });
                </script>
                break;
        }


        <div class="InfoUnderCanvas">
            @if (LevelPossessed == 10)
            {
                <p>MAXIMUM LEVEL HAS BEEN REACHED</p>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="h2">@Model.ErrorMessage</div>
            }
            else if (Model.Playerinfo is null)
            {
                <div class="h4">Loading</div>
            }
            else
            {
                <p class="EloInfoUnderCanvas">CS2 ELO: @request</p>
                <p class="EloInfoUnderCanvas2">
                    CS:GO ELO: @if (Model.Playerinfo.games.csgo != null)
                    {
                        <span>@Model.Playerinfo.games.csgo.faceit_elo</span>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </p>
                <p class="EloInfoUnderCanvas3" id="max-csgo-elo">MAX CS:GO ELO: <span id="max-csgo-elo-value"></span><span class="loading-dots">...</span></p>
            }

        </div>
    </div>

    <div class="col-md-4">
        <div class="StatsContainer">
            <div class="OverallStats">
                <p class="title">OVERALL</p>
                @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                {
                    <div class="h2">@Model.ErrorMessage</div>
                }
                else if (Model.Playerinfo is null)
                {
                    <div class="h4">Loading</div>
                }
                else
                {
                    <p>MATCHES: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Matches</span></p>

                    <p>WINS: <span class="Result">@Model.OverallPlayerStatsInfo.lifetime.Wins</span></p>

                    <p>WIN RATIO: <span class="Result" style="color: @(int.Parse(Model.OverallPlayerStatsInfo.lifetime.WinRate) >= 50 ?                                                                                             "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.WinRate%</span></p>

                    <p>HEADSHOTS: <span class="Result" style="color:@(int.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots)>=45 ?  "#6BBE49" : "#F20707")">                                                                    @Model.OverallPlayerStatsInfo.lifetime.AverageHeadshots%</span></p>

                    <p>K/D RATIO: <span class="Result" style="color: @(double.Parse(Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1 ?                                                                           "#6BBE49" : "#F20707")">@Model.OverallPlayerStatsInfo.lifetime.AverageKDRatio</span></p>

                    <p>
                        <span class="HighestCs2EloContainer" title="Highest CS2 ELO">
                            <img src="/Assets/trending-up.png" alt="Trending up icon" width="25" height="25" class="HighestCs2Elo"> CS2 ELO:
                        </span>
                        <span id="highest-cs2-elo-value" class="Result"> <span class="loading-dots">...</span></span>
                    </p>

                    @section Scripts {
                    <script>
                        $(document).ready(function () {
                            var playerId = '@Model.Playerinfo.player_id'; // Get playerId from model

                            function updateElos(maxCs2Elo, maxCs2MatchID, maxCsgoElo, maxCsgoMatchID) {
                                // Make the ELO values clickable and redirect to the corresponding match room
                                $('#max-csgo-elo').html(
                                    'MAX CS:GO ELO: <a class="max-links" href="https://www.faceit.com/en/csgo/room/' + maxCsgoMatchID + '" target="_blank">' + maxCsgoElo + '</a>'
                                );
                                $('#highest-cs2-elo-value').html(
                                    '<a class="max-links" href="https://www.faceit.com/en/cs2/room/' + maxCs2MatchID + '" target="_blank">' + maxCs2Elo + '</a>'
                                );
                            }
                            $.ajax({
                                url: '/FetchMaxElo',
                                type: 'GET',
                                data: { playerId: playerId },
                                success: function (data) {
                                    /*console.log("Received data from server: ", data); */ // Log the entire data object

                                    var maxCs2Elo = data.highestCs2Elo;
                                    var maxCs2MatchID = data.highestCs2EloMatchID;
                                    var maxCsgoElo = data.highestCsgoElo;
                                    var maxCsgoMatchID = data.highestCsgoMatchID;

                                    //console.log("CS2 ELO: ", maxCs2Elo);
                                    //console.log("CS2 Match ID: ", maxCs2MatchID);
                                    //console.log("CSGO ELO: ", maxCsgoElo);
                                    //console.log("CSGO Match ID: ", maxCsgoMatchID);

                                    // Call the function to update the UI
                                    updateElos(maxCs2Elo, maxCs2MatchID, maxCsgoElo, maxCsgoMatchID);
                                },
                                error: function () {
                                    $('#player-stats-container').html('<p>Error loading data</p>');
                                    $('#max-csgo-elo').empty();
                                }
                            });
                        });
                    </script>

                }

                }

            </div>
            <div class="Last20Stats">

                @{
                    bool ShowDifferentStatsLast20 = true;

                    void RenderLast20Stats(List<MatchStats.Round> MatchesStats, string id, bool RankedGame = false, bool FiveVsFiveGame = false)
                    {
                                                                                                            <p class="title">LAST 20</p>

                                                                                                            @if (MatchesStats != null)
                        {
                            double totalKdRatio = 0;
                            double totalKrRatio = 0;
                            double totalAverageKills = 0;
                            double totalAverageAssists = 0;
                            double gameCount = 0;
                            double wins = 0;
                            double totalADR = 0;

                            int matchCounter = 0;
                            int matchCounterWithWalkovers = 0;

                                                                                                                @foreach (var match in MatchesStats)
                            {
                                if (match.teams is not null && match.best_of != "Walkover")
                                {
                                    foreach (var team in match.teams)
                                    {
                                        foreach (var player in team.players)
                                        {
                                            try
                                            {
                                                if (player.player_stats.ADR == null)
                                                {
                                                    ShowDifferentStatsLast20 = false;
                                                }
                                            }
                                            catch
                                            {
                                                ShowDifferentStatsLast20 = false;
                                            }

                                            if (matchCounter < 20)
                                            {

                                                if (player.player_id == id && (!RankedGame || Model.Last20MatchesStats[matchCounter].calculate_elo == true) && FiveVsFiveGame == false)
                                                {
                                                    double kills = double.Parse(player.player_stats.Kills);
                                                    double deaths = double.Parse(player.player_stats.Deaths);
                                                    double Assists = double.Parse(player.player_stats.Assists);
                                                    double ADR = 0;

                                                    if (ShowDifferentStatsLast20)
                                                    {
                                                        ADR = double.Parse(player.player_stats.ADR.ToString().Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);
                                                    }

                                                    double kdRatio = double.Parse(player.player_stats.KDRatio.ToString().Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);
                                                    double KrRatio = double.Parse(player.player_stats.KRRatio.ToString().Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);

                                                    totalAverageKills += kills;
                                                    totalAverageAssists += Assists;
                                                    totalKrRatio += KrRatio;
                                                    totalKdRatio += kdRatio;
                                                    totalADR += ADR;
                                                    gameCount++;

                                                    if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == id) ||
                                                    match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == id))
                                                    {
                                                        wins++;
                                                    }
                                                }

                                                if (player.player_id == id && RankedGame == false && FiveVsFiveGame == true && Model.Last20MatchesStats[matchCounterWithWalkovers].game_mode == "5v5")
                                                {
                                                    double kills = double.Parse(player.player_stats.Kills);
                                                    double deaths = double.Parse(player.player_stats.Deaths);
                                                    double Assists = double.Parse(player.player_stats.Assists);
                                                    double ADR = 0;

                                                    if (ShowDifferentStatsLast20)
                                                    {
                                                        ADR = double.Parse(player.player_stats.ADR.ToString().Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);
                                                    }
                                                    double kdRatio = double.Parse(player.player_stats.KDRatio.Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);
                                                    double KrRatio = double.Parse(player.player_stats.KRRatio.Replace(",", "."), NumberStyles.Float, CultureInfo.InvariantCulture);

                                                    totalAverageKills += kills;
                                                    totalAverageAssists += Assists;
                                                    totalKrRatio += KrRatio;
                                                    totalKdRatio += kdRatio;
                                                    totalADR += ADR;
                                                    gameCount++;

                                                    if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == id) ||
                                                    match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == id))
                                                    {
                                                        wins++;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                    matchCounter++;
                                }
                                matchCounterWithWalkovers++;
                            }

                            double averageKdRatio = totalKdRatio / gameCount;
                            double averageKrRatio = totalKrRatio / gameCount;
                            double averageAdrRatio = totalADR / gameCount;
                            double averageKills = totalAverageKills / gameCount;
                            double averageAssists = totalAverageAssists / gameCount;
                            double winratio = (wins / gameCount) * 100;


                            string averageKdRatioFormatted = averageKdRatio.ToString("F2");
                            string averageKrRatioFormatted = averageKrRatio.ToString("F2");
                            string averageAdrRatioFormatted = averageAdrRatio.ToString("F1");
                            string averageKillsFormatted = (averageKills % 1 >= 0.5) ? averageKills.ToString("F2").Replace(",", ".") : averageKills.ToString("F2").Replace(",", ".");
                            string averageAssistsFormatted = averageAssists.ToString("F0");

                                                                                                                <p>K/D RATIO: <span class="Result" style="color:@(Math.Round(averageKdRatio, 2) >= 1.00 ? "#6BBE49" : "#F20707")">@averageKdRatioFormatted.Replace(",",".")</span></p>

                                                                                                                <p>K/R RATIO: <span class="Result" style="color:@(averageKrRatio>=0.70 ? "#6BBE49" : "#F20707")">@averageKrRatioFormatted.Replace(",",".")</span></p>

                                                                                                                <p>WIN RATIO: <span class="Result" style="color:@(winratio>=50 ? "#6BBE49" : "#F20707")">@winratio.ToString("F0")%</span></p>

                                                                                                                <p>AVG KILLS: <span class="Result" style="color:@(averageKills>=16 ? "#6BBE49" : "#F20707")">@averageKillsFormatted</span></p>

                            if (ShowDifferentStatsLast20)
                            {
                                                                                                                    <p>AVG ADR: <span class="Result" style="color:@(averageAdrRatio>=75 ? "#6BBE49" : "#F20707")">@averageAdrRatioFormatted.Replace(",", ".")</span></p>
                            }
                            else
                            {
                                                                                                                    <p>AVG ASSISTS: <span class="Result">@averageAssists.ToString("F0")</span></p>
                            }

                                                                                                                <span>
                                                                                                                    @{
                                    int balance = 9999;
                                    int lastEloToRetrieve = 0;
                                    int firstEloToRetrieve = 0;

                                    if (Model.EloDiff.Count() >= 20)
                                    {
                                        if (Model.EloDiff[19].elo is null)
                                        {
                                            for (int i = 19; i >= 0; i--)
                                            {
                                                if (Model.EloDiff[i].elo is not null)
                                                {
                                                    lastEloToRetrieve = int.Parse(Model.EloDiff[i].elo.ToString());
                                                    break;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            lastEloToRetrieve = int.Parse(Model.EloDiff[19].elo.ToString());
                                        }

                                        if (Model.EloDiff[0].elo is null)
                                        {
                                            for (int j = 0; j <= 19; j++)
                                            {
                                                if (Model.EloDiff[j].elo is not null)
                                                {
                                                    firstEloToRetrieve = int.Parse(Model.EloDiff[j].elo.ToString());
                                                    break;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            firstEloToRetrieve = int.Parse(Model.EloDiff[0].elo.ToString());
                                        }

                                        balance = firstEloToRetrieve - lastEloToRetrieve;
                                    }
                                                                                                                    }
                                                                                                                </span>

                                                                                                                <p>
                                                                                                                    <span class="BALANCE" title="How much you lost or gained within the last 20 matches">BALANCE:</span> @{
                                    if (balance != 9999)
                                    {
                                                                                                                                                                                                                <span class="Result" style="color: @(balance > 0 ? "#6BBE49" : (balance < 0 ? "#F20707" : "white"))">
                                                                                                                                                                                                                    @(
                                        balance > 0 ? '+' : (balance < 0 ? "-" : "")
                                                                                                                                                                                                                        )@Math.Abs(balance)
                                                                                                                                                                                                                </span>
                                    }

                                    else
                                    {
                                                                                                                                                                                                                <span class="Result">-</span>
                                    }
                                                                                                                    }
                                                                                                                </p>


                        }
                    }
                }

                <div id="Last20Stats">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, false, false);
                    }
                </div>

                <div id="RankedGames">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, true, false);
                    }
                </div>

                <div id="5v5MatchesOnlyStats">
                    @{
                        RenderLast20Stats(Model.Last20MatchesStats, Model.Playerinfo.player_id, false, true);
                    }
                </div>

            </div>

            <div class="SwitchToggle">

                <div class="Ranked5v5Games">
                    <p>RANKED GAMES</p>
                    <label class="switch">
                        <input type="checkbox" id="toggleSwitch">
                        <span class="slider round"></span>
                    </label>
                </div>

                <div class="WalkoverGames">
                    <p> OTHERS</p>
                    <label class="switch">
                        <input type="checkbox" id="toggleWalkoverSwitch">
                        <span class="slider round"></span>
                    </label>
                </div>

                <div class="Only5v5Games">
                    <p>ONLY 5V5</p>
                    <label class="switch">
                        <input type="checkbox" id="toggle5V5Games">
                        <span class="slider round"></span>
                    </label>
                </div>

                <script>
                    const toggleSwitch = document.getElementById('toggleSwitch');
                    const toggle5V5Games = document.getElementById('toggle5V5Games');
                    const last20Stats = document.getElementById('Last20Stats');
                    const rankedGames = document.getElementById('RankedGames');
                    const All5v5games = document.getElementById('5v5MatchesOnlyStats');

                    const v5ALLmatches = document.getElementsByClassName('v5MatchALL');
                    const v5Elo = document.getElementsByClassName('v5Match');
                    const v1TableMatches = document.getElementsByClassName('UnrankedMatch');

                    toggleSwitch.addEventListener('change', function () {
                        if (this.checked) {
                            last20Stats.style.display = 'none';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'block';

                            for (let i = 0; i < v5ALLmatches.length; i++) {
                                v5ALLmatches[i].style.display = 'none';
                            }

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'none';
                            }
                            for (let i = 0; i < v5ALLMatches.length; i++) {
                                v5ALLMatches[i].style.display = 'none';
                            }

                            for (let i = 0; i < v5Elo.length; i++) {
                                v5Elo[i].style.display = 'block';
                            }

                        } else {
                            last20Stats.style.display = 'block';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'none';

                            for (let i = 0; i < v5ALLmatches.length; i++) {
                                v5ALLmatches[i].style.display = 'table-row';
                            }

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'table-row';
                            }
                            for (let i = 0; i < v5ALLmatches.length; i++) {
                                v5ALLmatches[i].style.display = 'table-row';
                            }
                            toggle5V5Games.checked = false;
                        }
                    });

                    toggle5V5Games.addEventListener('change', function () {
                        if (this.checked) {
                            last20Stats.style.display = 'none';
                            All5v5games.style.display = 'block';
                            rankedGames.style.display = 'none';

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'none';
                            }

                            for (let i = 0; i < v5ALLmatches.length; i++) {
                                v5ALLmatches[i].style.display = 'table-row';
                            }


                        } else {
                            last20Stats.style.display = 'block';
                            All5v5games.style.display = 'none';
                            rankedGames.style.display = 'none';

                            for (let i = 0; i < v1TableMatches.length; i++) {
                                v1TableMatches[i].style.display = 'table-row';
                            }

                            toggleSwitch.checked = false;


                        }
                    });

                    // Set the initial state based on the default checked attributes
                    toggleSwitch.dispatchEvent(new Event('change'));
                    toggle5V5Games.dispatchEvent(new Event('change'));
                </script>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-md-12 EloGraph">
        <canvas id="EloChart" height="250"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const ctx = document.getElementById('EloChart');
        var totalMatches = @Model.OverallPlayerStatsInfo.lifetime.Matches;
        var matches = [];
        @{
            List<int?> Last20Elo = new List<int?>();

            foreach (var elo in Model.EloDiff)
            {
                if (elo.elo != null)
                {
                    Last20Elo.Add(int.Parse(elo.elo.ToString()));
                }
                else
                {
                    Last20Elo.Add(null);
                }
            }

            if (Last20Elo.Count > 0)
            {
                Last20Elo.RemoveAt(Last20Elo.Count - 1);
            }
        }

        @{
            var lastGameElo = 0;
            var twentiethGameElo = 0;
            var eloDifference = 0;
            var maxDifference = 0;

            if (Last20Elo.Count() < 20)
            {

            }
            else
            {

                for (int i = 0; i < 20; i++)
                {
                    if (Last20Elo[i] == null)
                    {
                        continue;
                    }

                    else
                    {
                        lastGameElo = int.Parse(Last20Elo[i].ToString());
                        break;
                    }
                }

                for (int i = 19; i >= 0; i--)
                {
                    if (Last20Elo[i] == null)
                    {
                        continue;
                    }

                    else
                    {
                        twentiethGameElo = int.Parse(Last20Elo[i].ToString());
                        break;
                    }
                }
                if (lastGameElo != null && twentiethGameElo != null)
                {
                    eloDifference = Math.Abs(lastGameElo - twentiethGameElo);

                    for (var i = 1; i < 20; i++)
                    {
                        var difference = 0;
                        var elo = Last20Elo[i];
                        if (elo != null)
                        {
                            difference = Math.Abs(lastGameElo - int.Parse(elo.ToString()));
                        }
                        if (difference > maxDifference)
                        {
                            maxDifference = difference;
                        }
                    }
                }
            }


            if (Last20Elo.Count() > 20)
            {
                Last20Elo.RemoveRange(Last20Elo.Count - 10, 10);
            }

        }

                                                                                                                                for (var i = 0; i < 20; i++) {
            matches.push(totalMatches - i);
        }

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: matches.reverse(),
                datasets: [{
                    label: 'ELO ADJUSTMENT LAST 20',
                    data: [@string.Join(",", Last20Elo.Select(item=>item))].reverse(),
                    backgroundColor: 'red',
                    borderColor: 'red',
                    pointHoverRadius: 5,
                    borderWidth: 2
                }]
            },
            options: {

                responsive: true,
                maintainAspectRatio: false,

                scales: {
                    y: {
                        min: @(eloDifference < maxDifference ? Math.Min(twentiethGameElo - maxDifference, lastGameElo - eloDifference) - 150 : lastGameElo - eloDifference - 150),
                        max: @(eloDifference < maxDifference ? Math.Max(lastGameElo + eloDifference, lastGameElo + maxDifference) + 150 : lastGameElo + maxDifference + 150),

                        ticks: {

                            stepSize: 100,
                            callback: function (value) {
                                if (value !== 0) {
                                    var roundedValue = Math.round(value / 10) * 10;
                                    return roundedValue.toString();
                                }
                                return value;
                            }
                        }
                    }
                }
            }
        });
    </script>
</div>

<div class="row matchespanel">
    <div class="col-md-12 PlayerInfo">
        @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="h2">@Model.ErrorMessage</div>
        }
        else if (Model.Playerinfo is null)
        {
            <div class="h4">Loading</div>
        }
        else
        {
            <table class="table matchesTable maintable">
                <thead>
                    <tr>
                        <th>RESULT</th>
                        <th>SCORE</th>
                        <th style="padding-left:1.5%;">MAP</th>
                        <th>MODE</th>
                        <th style="padding-left:3%;">TEAM</th>
                        <th>STATS</th>
                        <th>K/R</th>
                        <th>K/D</th>
                        <th style="text-align:center;">DATE</th>
                        <th>LINK</th>
                        <th style="padding-left:1.7%;">ELO</th>

                    </tr>
                </thead>
                <tbody>

                    @{
                        int index = 0;
                    }

                    @{
                        for (int i = 0; i < Model.EloDiff.Count(); i++)
                        {
                            if (Model.EloDiff[i].elo == null)
                                Model.EloDiff[i].elo = 0.ToString();
                        }
                    }

                    @{
                        int matchCounter = 0;
                    }
                    @{
                        if (Model.Last20MatchesStats is not null)
                        {



                                                                                                                @foreach (var match in Model.Last20MatchesStats)
                            {
                                void RenderMatchInTable()
                                {
                                                                                                                        @if (match.round_stats is not null)
                                    {
                                                                                                                        <td>
                                                                                                                                @if (match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == Model.Playerinfo.player_id) ||
                                       match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                            {
                                                                                                                                <p style="color:#6BBE49;" class="Result">WIN</p>
                                            }
                                            else
                                            {
                                                                                                                                <p style="color:#F20707;" class="Result">LOSS</p>
                                            }

                                                                                                                        </td>
                                                                                                                        <td>@match.round_stats.Score</td>
                                                                                                                        <td style="overflow: hidden; text-overflow: ellipsis; max-width: 100px; word-wrap: break-word; word-break: break-word;">@match.round_stats.Map</td>
                                                                                                                        <td style="padding-left:1.5%;">@match.game_mode</td>
                                                                                                                        <td>
                                                                                                                                @if (match.teams[0].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                            {
                                                                                                                                <p>@match.teams[0].team_stats.Team</p>
                                            }
                                            else if (match.teams[1].players.Any(p => p.player_id == Model.Playerinfo.player_id))
                                            {
                                                                                                                                <p>@match.teams[1].team_stats.Team</p>
                                            }
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                                @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                            }
                                            else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p>@playerStats.Kills-@playerStats.Assists-@playerStats.Deaths</p>
                                            }
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                                @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                            }
                                            else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p class="Result" style="color:@(double.Parse(playerStats.KRRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 0.70 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KRRatio</p>
                                            }
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                                @if (match.teams[0].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[0].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                            }
                                            else if (match.teams[1].players.Any(player => player.player_id == Model.Playerinfo.player_id))
                                            {
                                                var playerStats = match.teams[1].players.First(player => player.player_id == Model.Playerinfo.player_id).player_stats;
                                                                                                                                <p class="Result" style="color:@(double.Parse(playerStats.KDRatio.Replace(",", "."), CultureInfo.InvariantCulture) >= 1.00 ?                                                                                        "#6BBE49" : "#F20707")">@playerStats.KDRatio</p>
                                            }
                                                                                                                        </td>

                                                                                                                        <td>
                                                                                                                                @{

                                                string readableDate = "";

                                                if (match.finished_at != 0)
                                                {
                                                    DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(match.finished_at);

                                                    DateTime dateTime = dateTimeOffset.ToLocalTime().DateTime;

                                                    CultureInfo englishCulture = new CultureInfo("en-US");

                                                    readableDate = dateTime.ToString("dd MMM HH:mm - yyyy", englishCulture);
                                                }
                                                                                                                                }

                                                                                                                            <p style="text-align:center;">@readableDate</p>
                                                                                                                        </td>

                                                                                                                        <td class="no-toggle" style="padding-left:1.5%;">
                                                                                                                            <a href="https://www.faceit.com/en/@Model.Game/room/@match.match_id" target="_blank">
                                                                                                                                <img src="/Assets/niewypelnione2.png" alt="Icon" height="25px" width="25px" />
                                                                                                                            </a>
                                                                                                                        </td>

                                                                                                                        <td>
                                                                                                                                @{
                                                var eloDiffList = Model.EloDiff;
                                                var targetEloDiff = eloDiffList.FirstOrDefault(eloDiff => eloDiff.match_Id == match.match_id);
                                                int elodifference = 0;

                                                if (targetEloDiff != null)
                                                {
                                                    int targetIndex = eloDiffList.IndexOf(targetEloDiff);

                                                    if (targetIndex < eloDiffList.Count - 1)
                                                    {
                                                        elodifference = int.Parse(targetEloDiff.elo.ToString()) - int.Parse(eloDiffList[targetIndex + 1].elo.ToString());

                                                        int counter = 1;

                                                        while ((elodifference > 400 || elodifference == 0) && counter <= 19)
                                                        {
                                                            counter++;
                                                            if ((targetIndex + counter) >= 0 && (targetIndex + counter) < eloDiffList.Count())
                                                            {
                                                                elodifference = int.Parse(targetEloDiff.elo.ToString()) - int.Parse(eloDiffList[targetIndex + counter].elo.ToString());
                                                            }
                                                        }


                                                        if (elodifference == 0 && counter == 20)
                                                        {
                                                            if (Model.Playerinfo.games.cs2.faceit_elo != null)
                                                            {
                                                                elodifference = int.Parse(Model.Playerinfo.games.cs2.faceit_elo.ToString());
                                                            }
                                                            else if (Model.Playerinfo.games.csgo.faceit_elo != null)
                                                            {
                                                                elodifference = int.Parse(Model.Playerinfo.games.csgo.faceit_elo.ToString());
                                                            }
                                                        }


                                                    }

                                                }

                                                                                                                                }


                                                                                                                                @{
                                                var isWinner = match.round_stats.Winner == match.teams[0].team_id && match.teams[0].players.Any(p => p.player_id == Model.Playerinfo.player_id) ||
                                                match.round_stats.Winner == match.teams[1].team_id && match.teams[1].players.Any(p => p.player_id == Model.Playerinfo.player_id);

                                                var resultColor = elodifference == 0 ? "#6BBE49" :
                                                Math.Abs(elodifference) > 400 ?
                                                (isWinner ? "#6BBE49" : "#F20707") :
                                                (elodifference > 0 ? "#6BBE49" : "#F20707");

                                                var sign = elodifference == 0 ? "+" : (Math.Abs(elodifference) > 400 ? (isWinner ? "+" : "-") : (elodifference > 0 ? "+" : "-"));
                                                                                                                                }





                                                                                                                            <p class="Result" style="color:@resultColor">
                                                                                                                                    @if (targetEloDiff != null)
                                                {
                                                                                                                                        @(targetEloDiff.elo.ToString() == "0" ? Math.Abs(elodifference) : targetEloDiff.elo.ToString())
                                                }
                                                                                                                                (@(sign)@(Math.Abs(elodifference) > 400 ? 0 : Math.Abs(elodifference)))
                                                                                                                            </p>

                                                                                                                                @{
                                                index++;
                                                                                                                                }
                                                                                                                        </td>


                                    }

                                    else
                                    {
                                                                                                                        <td>
                                                                                                                                @{
                                                if (match.competition_name.ToString().ToUpper().Contains("BLAST"))
                                                {
                                                                                                                                                                                                                        <p class="Result">BLAST</p>
                                                }

                                                else
                                                {
                                                                                                                                                                                                                        <p class="Result">Walkover</p>
                                                }
                                                                                                                                }
                                                                                                                        </td>
                                                                                                                        <td></td>
                                                                                                                        <td colspan="3">
                                                                                                                            <p class="Result">@match.competition_name</p>
                                                                                                                        </td>
                                                                                                                        <td></td>
                                                                                                                        <td></td>
                                                                                                                        <td></td>
                                                                                                                        <td></td>
                                                                                                                        <td style="padding-left:1.5%;">
                                                                                                                            <a href="https://www.faceit.com/en/cs2/room/@match.match_id" target="_blank">
                                                                                                                                <img src="/Assets/niewypelnione2.png" alt="Icon" height="25px" width="25px" />
                                                                                                                            </a>
                                                                                                                        </td>
                                                                                                                        <td></td>


                                    }
                                }



                                if (Model.Last20MatchesStats[matchCounter].best_of == "Walkover" && !(Model.Last20MatchesStats[matchCounter].competition_name.ToString().ToUpper().Contains("BLAST")))
                                {
                                                                                                                    <tr class="match-row Walkover" style="display: none;">

                                                                                                                            @{
                                            RenderMatchInTable();
                                                                                                                            }
                                                                                                                        <script>
                                                                                                                            const WalkoverGame = document.getElementsByClassName('Walkover');

                                                                                                                            toggleWalkoverSwitch.addEventListener('change', function () {
                                                                                                                                if (this.checked) {
                                                                                                                                    for (let i = 0; i < WalkoverGame.length; i++) {
                                                                                                                                        WalkoverGame[i].style.display = 'table-row';
                                                                                                                                    }
                                                                                                                                } else {
                                                                                                                                    for (let i = 0; i < WalkoverGame.length; i++) {
                                                                                                                                        WalkoverGame[i].style.display = 'none';
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            });

                                                                                                                            toggleWalkoverSwitch.dispatchEvent(new Event('change'));
                                                                                                                        </script>
                                                                                                                    </tr>
                                }

                                else if (Model.Last20MatchesStats[matchCounter].best_of == "Walkover" && Model.Last20MatchesStats[matchCounter].competition_name.ToString().ToUpper().Contains("BLAST"))
                                {
                                                                                                                    <tr class="match-row Walkover BLAST" style="display: none;">
                                                                                                                            @{
                                            RenderMatchInTable();
                                                                                                                            }

                                                                                                                    </tr>

                                                                                                                    <script>
                                                                                                                        const WalkoverGame = document.getElementsByClassName('BLAST');

                                                                                                                        toggleWalkoverSwitch.addEventListener('change', function () {
                                                                                                                            if (this.checked) {
                                                                                                                                for (let i = 0; i < WalkoverGame.length; i++) {
                                                                                                                                    WalkoverGame[i].style.display = 'table-row';
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                for (let i = 0; i < WalkoverGame.length; i++) {
                                                                                                                                    WalkoverGame[i].style.display = 'none';
                                                                                                                                }
                                                                                                                            }
                                                                                                                        });

                                                                                                                        toggleWalkoverSwitch.dispatchEvent(new Event('change'));
                                                                                                                    </script>

                                }

                                else if (Model.Last20MatchesStats[matchCounter].calculate_elo == true)
                                {
                                                                                                                    <tr class="match-row v5Match">
                                                                                                                            @{
                                            RenderMatchInTable();
                                                                                                                            }
                                                                                                                    </tr>

                                }

                                else if (Model.Last20MatchesStats[matchCounter].game_mode == "5v5")
                                {
                                                                                                                    <tr class="match-row v5MatchALL">
                                                                                                                            @{
                                            RenderMatchInTable();
                                                                                                                            }
                                                                                                                    </tr>

                                }

                                else
                                {
                                                                                                                    <tr class="match-row UnrankedMatch">
                                                                                                                            @{
                                            RenderMatchInTable();
                                                                                                                            }
                                                                                                                    </tr>

                                }

                                                                                                                <tr class="scoreboard match-row" style="display: none;">
                                                                                                                    <td colspan="11">
                                                                                                                        <table class="table matchesTableStats">
                                                                                                                            <thead>
                                                                                                                                    @{
                                                    bool ShowDifferentStats = false;
                                                    try
                                                    {
                                                        if (match.teams is not null && match.teams[0].players[0].player_stats.ADR != null)
                                                        {
                                                            ShowDifferentStats = true;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        ShowDifferentStats = true;
                                                    }

                                                                                                                                    }
                                                                                                                                <tr>
                                                                                                                                    <th>PLAYER</th>
                                                                                                                                    <th>KILLS</th>
                                                                                                                                    <th>DEATHS</th>
                                                                                                                                    <th>ASSISTS</th>
                                                                                                                                    <th class="thMoreSpace">K/R</th>
                                                                                                                                    <th class="thMoreSpace">K/D</th>
                                                                                                                                    <th class="thMoreSpace">@(ShowDifferentStats ? "ADR" : "HEADSHOTS")</th>
                                                                                                                                    <th>HEADSHOTS %</th>
                                                                                                                                    <th>@(ShowDifferentStats ? "ENTRY COUNT" : "MVPs")</th>
                                                                                                                                    <th>@(ShowDifferentStats ? "1v1 WINS" : "TRIPPLE KILLS")</th>
                                                                                                                                    <th>@(ShowDifferentStats ? "1v2 WINS" : "QUADRO KILLS")</th>
                                                                                                                                    <th>@(ShowDifferentStats ? "UTILITY DAMAGE" : "PENTA KILLS")</th>
                                                                                                                                        @if (ShowDifferentStats)
                                                    {
                                                                                                                                        <th>MORE</th>
                                                    }
                                                                                                                                </tr>

                                                                                                                            </thead>
                                                                                                                            <tbody>
                                                                                                                                    @if (match.teams is not null)
                                                {
                                                    var playersTeam0 = match.teams[0].players.OrderByDescending(p => int.Parse(p.player_stats.Kills));


                                                                                                                                        @foreach (var player in playersTeam0)
                                                    {
                                                                                                                                        <tr>
                                                                                                                                            <td style="text-align:left;"> <a asp-action="PlayerStats" asp-route-nickname="@player.player_id" style="text-decoration:none; color:                                                                                                  @(player.player_id == Model.Playerinfo.player_id ? "#6BBE49" : "white")">@player.nickname</a></td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@player.player_stats.Kills</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@player.player_stats.Deaths</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@player.player_stats.Assists</td>
                                                                                                                                            <td style="text-align:center;">@player.player_stats.KRRatio</td>
                                                                                                                                            <td style="text-align:center;">@player.player_stats.KDRatio</td>
                                                                                                                                            <td style="text-align:center;">@(ShowDifferentStats ? player.player_stats.ADR : player.player_stats.Headshots)</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@player.player_stats.HeadshotsPercentage</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.EntryCount : player.player_stats.MVPs)</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.v1Wins : player.player_stats.TripleKills)</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.v2Wins : player.player_stats.QuadroKills)</td>
                                                                                                                                            <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.UtilityDamage : player.player_stats.PentaKills)</td>
                                                                                                                                                @if (ShowDifferentStats)
                                                            {
                                                                                                                                                <td class="more-button" style="text-align:center;">
                                                                                                                                                    <img src="/Assets/niewypelnione2red.png" alt="Icon" class="more-button-cursor" height="25px" width="25px" />
                                                                                                                                                </td>
                                                            }
                                                                                                                                        </tr>

                                                                                                                                        <tr class="scoreboard match-row" style="display: none;">
                                                                                                                                            <td colspan="13">

                                                                                                                                                <table class="table matchesAdditionalTableStats">
                                                                                                                                                    <thead>
                                                                                                                                                        <tr>
                                                                                                                                                            <th>CLUTCH KILLS</th>
                                                                                                                                                            <th>FIRST KILLS</th>
                                                                                                                                                            <th>TOTAL DAMAGE</th>
                                                                                                                                                            <th>ENTRY WINS</th>
                                                                                                                                                            <th>FLASH COUNT</th>
                                                                                                                                                            <th>FLASH SUCCESS</th>
                                                                                                                                                            <th>ENEMIES FLASHED</th>
                                                                                                                                                            <th>PISTOL KILLS</th>
                                                                                                                                                            <th>SNIPER KILLS</th>
                                                                                                                                                            <th>ZEUS KILLS</th>
                                                                                                                                                            <th>KNIFE KILLS</th>
                                                                                                                                                            <th>DOUBLE KILLS</th>

                                                                                                                                                        </tr>
                                                                                                                                                    </thead>
                                                                                                                                                    <tbody>

                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.ClutchKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.FirstKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.Damage</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.EntryWins</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.FlashCount</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.FlashSuccesses</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.EnemiesFlashed</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.PistolKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.SniperKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.ZeusKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.KnifeKills</td>
                                                                                                                                                    <td style="text-align:center; padding-right:5%;">@player.player_stats.DoubleKills</td>

                                                                                                                                    </tbody>
                                                                                                                                </table>
                                                                                                                            </td>
                                                                                                                        </tr>
                                                    }
                                                }
                                                                                                                </tbody>
                                                                                                            </table>
                                                                                                            <table class="table matchesTableStats">
                                                                                                                <thead>

                                                                                                                    <tr>
                                                                                                                        <th>PLAYER</th>
                                                                                                                        <th>KILLS</th>
                                                                                                                        <th>DEATHS</th>
                                                                                                                        <th>ASSISTS</th>
                                                                                                                        <th class="thMoreSpace">K/R</th>
                                                                                                                        <th class="thMoreSpace">K/D</th>
                                                                                                                        <th class="thMoreSpace">@(ShowDifferentStats ? "ADR" : "HEADSHOTS")</th>
                                                                                                                        <th>HEADSHOTS %</th>
                                                                                                                        <th>@(ShowDifferentStats ? "ENTRY COUNT" : "MVPs")</th>
                                                                                                                        <th>@(ShowDifferentStats ? "1v1 WINS" : "TRIPPLE KILLS")</th>
                                                                                                                        <th>@(ShowDifferentStats ? "1v2 WINS" : "QUADRO KILLS")</th>
                                                                                                                        <th>@(ShowDifferentStats ? "UTILITY DAMAGE" : "PENTA KILLS")</th>
                                                                                                                                        @if (ShowDifferentStats)
                                                    {
                                                                                                                            <th>MORE</th>
                                                    }
                                                                                                                    </tr>
                                                                                                                </thead>
                                                                                                                <tbody>
                                                                                                                                    @if (match.teams is not null)
                                                {
                                                    var playersTeam1 = match.teams[1].players.OrderByDescending(p => int.Parse(p.player_stats.Kills));

                                                                                                                                        @foreach (var player in playersTeam1)
                                                    {
                                                                                                                            <tr>
                                                                                                                                <td style="text-align:left;"> <a asp-action="PlayerStats" asp-route-nickname="@player.player_id" style="text-decoration:none; color:                                                                                                  @(player.player_id == Model.Playerinfo.player_id ? "#6BBE49" : "white")">@player.nickname</a></td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@player.player_stats.Kills</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@player.player_stats.Deaths</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@player.player_stats.Assists</td>
                                                                                                                                <td style="text-align:center;">@player.player_stats.KRRatio</td>
                                                                                                                                <td style="text-align:center;">@player.player_stats.KDRatio</td>
                                                                                                                                <td style="text-align:center;">@(ShowDifferentStats ? player.player_stats.ADR : player.player_stats.Headshots)</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@player.player_stats.HeadshotsPercentage</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.EntryCount : player.player_stats.MVPs)</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.v1Wins : player.player_stats.TripleKills)</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.v2Wins : player.player_stats.QuadroKills)</td>
                                                                                                                                <td style="text-align:center; padding-right:2%;">@(ShowDifferentStats ? player.player_stats.UtilityDamage : player.player_stats.PentaKills)</td>
                                                                                                                                                @if (ShowDifferentStats)
                                                            {
                                                                                                                                    <td class="more-button" style="text-align:center;">
                                                                                                                                        <img src="/Assets/niewypelnione2red.png" alt="Icon" height="25px" width="25px" />
                                                                                                                                    </td>
                                                            }
                                                                                                                            </tr>

                                                                                                                            <tr class="scoreboard match-row" style="display: none;">
                                                                                                                                <td colspan="13">

                                                                                                                                    <table class="table matchesAdditionalTableStats">
                                                                                                                                        <thead>
                                                                                                                                            <tr>
                                                                                                                                                <th>CLUTCH KILLS</th>
                                                                                                                                                <th>FIRST KILLS</th>
                                                                                                                                                <th>TOTAL DAMAGE</th>
                                                                                                                                                <th>ENTRY WINS</th>
                                                                                                                                                <th>FLASH COUNT</th>
                                                                                                                                                <th>FLASH SUCCESS</th>
                                                                                                                                                <th>ENEMIES FLASHED</th>
                                                                                                                                                <th>PISTOL KILLS</th>
                                                                                                                                                <th>SNIPER KILLS</th>
                                                                                                                                                <th>ZEUS KILLS</th>
                                                                                                                                                <th>KNIFE KILLS</th>
                                                                                                                                                <th>DOUBLE KILLS</th>

                                                                                                                                            </tr>
                                                                                                                                        </thead>
                                                                                                                                        <tbody>

                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.ClutchKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.FirstKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.Damage</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.EntryWins</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.FlashCount</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.FlashSuccesses</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.EnemiesFlashed</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.PistolKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.SniperKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.ZeusKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.KnifeKills</td>
                                                                                                                                        <td style="text-align:center; padding-right:5%;">@player.player_stats.DoubleKills</td>
                                                                                                                        </tbody>
                                                                                                                    </table>
                                                                                                                    </td>
                                                                                                                    </tr>

                                                    }
                                                }
                                                                                                            </tbody>
                                                                                                            </table>
                                                                                                            </td>
                                                                                                            </tr>

                                matchCounter++;
                            }       }
                    }
            </tbody>
            </table>

            <div id="matchesList">
            </div>

            <button id="loadMoreButton" class="load-more-button">LOAD MORE</button>

            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

            @if (Model.Last20MatchesStats is not null)
            {
                <script>
                    var nickname = '@Model.Playerinfo.nickname';
                    var playerID = '@Model.Playerinfo.player_id';
                    var offset = @Model.Last20MatchesStats.Count();
                    var isOffsetModificated = false;
                    var QuantityOfEloRetrieves = 10;
                    var currentModel = @Html.Raw(JsonConvert.SerializeObject(Model.EloDiff));
                    var currentPage = @Model.currentPage;
                    var CsGoSwap = @Model.CsGoSwap;
                    var Game = '@Model.Game';
                    var SwitchedToCsGo = false;

                    if (offset % 2 == 1) {
                        offset--;
                        isOffsetModificated = true;
                    }

                    function loadMoreMatches() {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("LoadMoreMatches", "PlayerStats")',
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify({
                                nickname: nickname,
                                offset: offset,
                                playerID: playerID,
                                isOffsetModificated: isOffsetModificated,
                                QuantityOfEloRetrieves: QuantityOfEloRetrieves,
                                currentModel: currentModel,
                                currentPage: currentPage,
                                CsGoSwap: CsGoSwap,
                                Game: Game
                            }),
                            success: function (response) {
                                $('.maintable').css('margin-bottom', '6%');
                                $('#matchesList').append(response.partialViewHtml);

                                // Update currentModel with the new EloDiff data from the response
                                currentModel = response.newEloDiff;
                                currentPage = response.currentPage;

                                $('.matchesTable').css({
                                    'table-layout': 'auto',  // or 'fixed', depending on your desired layout
                                    'width': '100%'
                                });


                                if (toggleSwitch.checked) {
                                    last20Stats.style.display = 'none';
                                    All5v5games.style.display = 'none';
                                    rankedGames.style.display = 'block';

                                    for (let i = 0; i < v5ALLmatches.length; i++) {
                                        v5ALLmatches[i].style.display = 'none';
                                    }

                                    for (let i = 0; i < v1TableMatches.length; i++) {
                                        v1TableMatches[i].style.display = 'none';
                                    }
                                }

                                if (toggle5V5Games.checked) {
                                    last20Stats.style.display = 'none';
                                    All5v5games.style.display = 'block';
                                    rankedGames.style.display = 'none';

                                    for (let i = 0; i < v1TableMatches.length; i++) {
                                        v1TableMatches[i].style.display = 'none';
                                    }

                                    for (let i = 0; i < v5ALLmatches.length; i++) {
                                        v5ALLmatches[i].style.display = 'table-row';
                                    }
                                }

                                // Update CsGoSwap with the value from the server response
                                CsGoSwap = response.csGoSwap;

                                // Increase offset and QuantityOfEloRetrieves after successful load
                                offset += 10;
                                QuantityOfEloRetrieves += 10;

                                // If switching to csgo, reset offset and CsGoSwap
                                if (response.csGoSwap == 1 && SwitchedToCsGo == false) {
                                    //console.log("updated");
                                    SwitchedToCsGo = true;
                                    offset = 10;
                                    Game = response.game;
                                    QuantityOfEloRetrieves = 10;
                                    currentPage = -1;
                                }

                                // Log CsGoSwap in the console to confirm it is being updated
                                //console.log("Updated CsGoSwap in JS: " + CsGoSwap);

                                // Update offset value in JavaScript variable
                                updateOffset(offset);
                            },
                            error: function () {
                                alert('Error loading more matches.');
                            }
                        });
                    }

                    $('#loadMoreButton').click(function () {
                        // Trigger the AJAX load on button click
                        loadMoreMatches();
                    });

                    // Function to update the offset in the JavaScript variable
                    function updateOffset(newOffset) {
                        if (isOffsetModificated) {
                            offset++;
                        }
                        offset = newOffset;
                    }
                </script>


            }

        }
    </div>
</div>

<div class="MapStatsRow">
    @* Define maps for filtering *@
    @{
        List<string> maps = new List<string>() { "DUST2", "MIRAGE", "INFERNO", "NUKE", "VERTIGO", "ANCIENT", "ANUBIS", "DE_DUST2", "DE_MIRAGE", "DE_INFERNO", "DE_NUKE", "DE_VERTIGO", "DE_ANCIENT", "DE_ANUBIS" };

        // Default model (CS2)
        var displayedMaps = Model.OverallPlayerStatsInfo.segments
        .Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))
        .OrderByDescending(x => x.label)
        .ToList();
    }

    <!-- Chart Section -->
    <div class="col-md-6 MapsRadarChart">
        <canvas id="MapsPlayedChart"></canvas>
    </div>

     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        var radarChart = null;
        var expandedRows = [];

        // Initialize data (default to CS2)
        var labels = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => map.label)))');
        var KD = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
        var KR = JSON.parse('@Html.Raw(Json.Serialize(displayedMaps.Select(map => double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');

        var data = {
            labels: labels,
            datasets: [
                {
                    label: "K/D",
                    data: KD,
                    backgroundColor: "rgba(200, 0, 0, 0.2)",
                    borderColor: "rgba(200, 0, 0, 1)",
                    borderWidth: 2,
                    pointBackgroundColor: "rgba(200, 0, 0, 1)",
                    pointBorderColor: "#fff",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(200, 0, 0, 1)"
                },
                {
                    label: "K/R",
                    data: KR,
                    backgroundColor: "rgba(0, 0, 200, 0.2)",
                    borderColor: "rgba(0, 0, 200, 1)",
                    borderWidth: 2,
                    pointBackgroundColor: "rgba(0, 0, 200, 1)",
                    pointBorderColor: "#fff",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(0, 0, 200, 1)"
                }
            ]
        };

      function initializeRadarChart() {
    radarChart = new Chart($("#MapsPlayedChart"), {
        type: 'radar',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                duration: 1500,
                easing: 'easeOutQuart'
            },
            scale: {
                ticks: {
                    beginAtZero: true,
                    stepSize: 0.5
                },
                pointLabels: {
                    fontSize: 14
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 16
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {

                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.raw !== null) {

                                label += parseFloat(context.raw).toFixed(2);
                            }
                            return label;
                        }
                    }
                }
            }
        }
    });
}


        function trackExpandedRows() {
            expandedRows = [];  // Clear the array before tracking
            $(".map-row").each(function (index) {
                if ($(this).next(".MapStatsInfo").is(":visible")) {
                    expandedRows.push(index); // Store the index of each expanded row
                }
            });
        }

        // Restore expanded rows after model change
        function restoreExpandedRows() {
            expandedRows.forEach(function (index) {
                var row = $(".map-row").eq(index);
                row.next(".MapStatsInfo").show(); // Expand the row
            });
        }

        function safeParse(value, defaultValue = "N/A") {
            if (typeof value === 'string' && value.trim() !== '') {
                return value.replace(",", ".");
            } else if (typeof value === 'number') {
                return value.toString();  // Ensure number is returned as a string
            }
            return defaultValue;
        }

        function formatNumber(value, decimals = 2) {
            if (!value || isNaN(value)) return "N/A";
            return parseFloat(value).toFixed(decimals);
        }

        // Function to normalize map labels: Remove 'de_' and capitalize the first letter
        function normalizeMapLabel(label) {
            if (label.startsWith("de_")) {
                label = label.substring(3);  // Remove 'de_' prefix
            }
            return label.charAt(0).toUpperCase() + label.slice(1);  // Capitalize the first letter
        }

        function sortLabels(labels) {
    return labels.sort((a, b) => normalizeMapLabel(a).localeCompare(normalizeMapLabel(b)));
}

        function updateChartAndTable(labels, KD, KR, mapsData, isCombined) {
            // Combine labels, KD, KR, and mapsData into an array of objects
            let combinedData = labels.map((label, index) => ({
                label: normalizeMapLabel(label),
                kd: KD[index],
                kr: KR[index],
                mapData: mapsData[index]
            }));

            // Sort the combined data by label
            combinedData.sort((a, b) => a.label.localeCompare(b.label));

            // Extract the sorted labels, KD, KR, and map data
            const sortedLabels = combinedData.map(item => item.label);
            const sortedKD = combinedData.map(item => item.kd);
            const sortedKR = combinedData.map(item => item.kr);
            const sortedMapsData = combinedData.map(item => item.mapData);

            // Update chart data with sorted values
            radarChart.data.labels = sortedLabels;
            radarChart.data.datasets[0].data = sortedKD;
            radarChart.data.datasets[1].data = sortedKR;
            radarChart.update();

            // Update the table body with sorted data
            const tableBody = $(".MapsTable tbody");
            tableBody.empty();
            sortedMapsData.forEach(map => {
                const winRate = isCombined ? map.stats.winRate : map.stats["Win Rate %"];
                const averageKDRatio = isCombined ? map.stats.averageKDRatio : map.stats["Average K/D Ratio"];
                const averageKRRatio = isCombined ? map.stats.averageKRRatio : map.stats["Average K/R Ratio"];
                const matches = map.stats.matches || "N/A";

                const averageKills = formatNumber(map.stats["Average Kills"] || map.stats.averageKills);
                const averageDeaths = formatNumber(map.stats["Average Deaths"] || map.stats.averageDeaths);
                const averageAssists = formatNumber(map.stats["Average Assists"] || map.stats.averageAssists);
                const headshotsPerMatch = formatNumber(map.stats["Headshots per Match"] || map.stats.headshotsPerMatch);
                const averageHeadshots = formatNumber(map.stats["Average Headshots %"] || map.stats.averageHeadshots, 0); // No decimal places for headshot %
                const averageTripleKills = formatNumber(map.stats["Average Triple Kills"] || map.stats.averageTripleKills);

                const winRateFormatted = (typeof winRate !== 'undefined' && !isNaN(parseFloat(safeParse(winRate, "0")))) ? Math.floor(parseFloat(safeParse(winRate, "0"))) : "N/A";
                const averageKDRatioFormatted = (averageKDRatio && !isNaN(parseFloat(safeParse(averageKDRatio, "0")))) ? parseFloat(safeParse(averageKDRatio, "0")).toFixed(2) : "N/A";
                const averageKRRatioFormatted = (averageKRRatio && !isNaN(parseFloat(safeParse(averageKRRatio, "0")))) ? parseFloat(safeParse(averageKRRatio, "0")).toFixed(2) : "N/A";

                const winRateColor = winRateFormatted !== "N/A" && parseFloat(winRateFormatted) >= 50 ? "#6BBE49" : "#F20707";
                const kdColor = averageKDRatioFormatted !== "N/A" && parseFloat(averageKDRatioFormatted) >= 1 ? "#6BBE49" : "#F20707";
                const krColor = averageKRRatioFormatted !== "N/A" && parseFloat(averageKRRatioFormatted) >= 0.7 ? "#6BBE49" : "#F20707";

                const rowHtml = `
                    <tr class="map-row">
                        <td><img src="${map.img_small}" style="width: 110px; height: 55px; overflow: hidden;"/></td>
                        <td><p class="Result" style="margin-left:-8%;">${normalizeMapLabel(map.label)}</p></td>
                        <td><p class="Result" style="padding-left:25%;">${matches}</p></td>
                        <td><p class="Result" style="padding-left:20%; color: ${winRateColor}">${winRateFormatted}%</p></td>
                        <td><p class="Result" style="padding-left:18%; color: ${kdColor}">${averageKDRatioFormatted}</p></td>
                        <td><p class="Result" style="padding-left:18%; color: ${krColor}">${averageKRRatioFormatted}</p></td>
                    </tr>

                    <tr class="MapStatsInfo" style="display:none;">
                        <td colspan="8">
                            <table class="table MapsTable">
                                <thead>
                                    <tr>
                                        <th style="text-align:center;">AVERAGE KILLS</th>
                                        <th style="text-align:center;">AVERAGE DEATHS</th>
                                        <th style="text-align:center;">AVERAGE ASSISTS</th>
                                        <th style="text-align:center;">HEADSHOTS PER GAME</th>
                                        <th style="text-align:center;">AVERAGE HEADSHOTS%</th>
                                        <th style="text-align:center;">AVERAGE TRIPLE</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><p class="Result" style="padding-left:20%;">${averageKills}</p></td>
                                        <td><p class="Result" style="padding-left:20%;">${averageDeaths}</p></td>
                                        <td><p class="Result" style="padding-left:20%;">${averageAssists}</p></td>
                                        <td><p class="Result" style="padding-left:20%;">${headshotsPerMatch}</p></td>
                                        <td><p class="Result" style="padding-left:40%;">${averageHeadshots}</p></td>
                                        <td><p class="Result" style="padding-left:20%;">${averageTripleKills}</p></td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                `;
                tableBody.append(rowHtml);
            });

            restoreExpandedRows();
        }


        // Handle model switching
        function loadModel(model) {

            trackExpandedRows();

            let newLabels, newKD, newKR, mapsData, isCombined = false;

            switch (model) {
                case 'cs2':
                    newLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => map.label)))');
                    newKD = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
                    newKR = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
                    mapsData = @Html.Raw(Json.Serialize(Model.OverallPlayerStatsInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))));
                    break;
                case 'csgo':
                    newLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCsGoInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => map.label)))');
                    newKD = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCsGoInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => double.Parse(map.stats.AverageKDRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
                    newKR = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCsGoInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper())).Select(map => double.Parse(map.stats.AverageKRRatio.Replace(",", "."), CultureInfo.InvariantCulture))))');
                    mapsData = @Html.Raw(Json.Serialize(Model.OverallPlayerStatsCsGoInfo?.segments.Where(map => map.mode == "5v5" && maps.Contains(map.label.ToUpper()))));
                    break;
                case 'combined':
                    isCombined = true;
                    newLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCombinedInfo?.Segments.Where(map => map.Mode == "5v5" && maps.Contains(map.Label.ToUpper())).Select(map => map.Label)))');
                    newKD = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCombinedInfo?.Segments.Where(map => map.Mode == "5v5" && maps.Contains(map.Label.ToUpper())).Select(map => map.Stats.AverageKDRatio)))');
                    newKR = JSON.parse('@Html.Raw(Json.Serialize(Model.OverallPlayerStatsCombinedInfo?.Segments.Where(map => map.Mode == "5v5" && maps.Contains(map.Label.ToUpper())).Select(map => map.Stats.AverageKRRatio)))');
                    mapsData = @Html.Raw(Json.Serialize(Model.OverallPlayerStatsCombinedInfo?.Segments.Where(map => map.Mode == "5v5" && maps.Contains(map.Label.ToUpper()))));
                    break;
            }

              // Normalize labels before sorting to ensure consistent sorting across models
                
                updateChartAndTable(newLabels, newKD, newKR, mapsData, isCombined);

        }

        // Animate chart on scroll
        function animateChartOnScroll() {
            var chartContainer = $(".MapsRadarChart");
            var scrollPosition = $(window).scrollTop() + $(window).height();
            var containerPosition = chartContainer.offset().top;

            if (scrollPosition > containerPosition && radarChart === null) {
                initializeRadarChart(); // Initialize only once
            }
        }

        $(document).ready(function () {
            $(window).on("scroll", animateChartOnScroll);

            // Initialize chart if visible on load
            animateChartOnScroll();

            // Event handlers for the filter buttons
            $("#filterCs2").click(function () {
                loadModel('cs2');
            });

            $("#filterCsgo").click(function () {
                loadModel('csgo');
            });

            $("#filterBoth").click(function () {
                loadModel('combined');
            });
        });

            var showedTableOnScroll = false;

            function handleTableAppearance() {
                var tableContainer = $(".table-container");

                $(window).scroll(function () {
                    var scrollPosition = $(this).scrollTop() + $(this).height();
                    var tablePosition = tableContainer.offset().top;

                    // If the user has scrolled past the table position and the table has not been shown yet
                    if (scrollPosition > tablePosition && !showedTableOnScroll) {
                        showedTableOnScroll = true;  // Set flag to true to avoid repeated execution
                        loadModel('cs2');  // Load the CS2 model
                        tableContainer.addClass("visible");  // Apply the animation class to fade in the table
                    }
                });
            }


        $(document).ready(function () {
            // Initialize the radar chart on page load
            initializeRadarChart();

            // Handle the scroll animation for table appearance
            handleTableAppearance();
        });

    $(document).ready(function () {
        // Event handler for clicking on .map-row to show/hide the next .MapStatsInfo row
        $(".MapsTable").on("click", ".map-row", function () {
            $(this).next(".MapStatsInfo").toggle();  // Toggles the visibility of the next .MapStatsInfo row
        });

        // Ensure that the rows are generated before adding the event handler
        updateChartAndTable(labels, KD, KR, mapsData, isCombined);
    });


    </script>

    <!-- FACEIT ACTIVE MAP POOL Section with Filter Buttons -->
    <div class="col-md-6 ActiveFaceitMapPoolContainer">
        <div class="TableMapTitle"><h2>*FACEIT ACTIVE MAP POOL</h2></div>

        <!-- Filter Buttons -->
        <div class="ActiveFaceitMapPoolButtons">

            @if (Model.OverallPlayerStatsInfo is not null && Model.csGoSwappedByDefault == false)
            {
                <div class="ActiveFaceitMapPoolButton-item" style="display:inline-block">
                    <p id="filterCs2"><span>+ CS2 only</span></p>
            </div>
            }

            @if (Model.OverallPlayerStatsCsGoInfo is not null)
            {
                <div class="ActiveFaceitMapPoolButton-item" style="display:inline-block">
                    <p id="filterCsgo"><span>+ CSGO only</span></p>
            </div>
            }

            @if (Model.OverallPlayerStatsInfo is not null && Model.OverallPlayerStatsCsGoInfo is not null)
            {
                <div class="ActiveFaceitMapPoolButton-item" style="display:inline-block">
                    <p id="filterBoth"><span>+ Include both</span></p>
            </div>
            }

        </div>

        <!-- Table with Map Stats -->
        <div class="table-container">
            <table class="table MapsTable" style="width:100%;">
                <thead>
                    <tr>
                        <th>IMG</th>
                        <th>MAP</th>
                        <th>MATCHES</th>
                        <th>WIN RATE</th>
                        <th>AVG K/D</th>
                        <th>AVG K/R</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically generated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $(".map-row").click(function () {
            $(this).next(".MapStatsInfo").toggle();
        });
    });
</script>

<script>
    $(document).ready(function () {
        var tableContainer = $(".table-container");

        $(window).scroll(function () {
            var scrollPosition = $(this).scrollTop() + $(this).height();
            var tablePosition = tableContainer.offset().top;

            if (scrollPosition > tablePosition) {
                tableContainer.addClass("visible");
            }
        });
    });
</script>



<script>
    $(document).ready(function () {
        $('.more-button').on('click', function () {
            var $row = $(this).closest('tr');
            var $hiddenRow = $row.next('.scoreboard.match-row');
            $hiddenRow.toggle();
        });
    });
</script>

<script>
    $(document).ready(function () {
        // Combine selectors for both match-row and match-row-second
        $(".match-row").click(function (event) {
            // Check if the click was on a link within the row
            if (!$(event.target).closest('.no-toggle').length) {
                $(this).next(".scoreboard").toggle();
            }
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var playerId = "@Model.Playerinfo.player_id";
        var game = "cs2"; // default game, change as needed

        fetchMatchHistory(playerId, game);

        function fetchMatchHistory(playerId, game) {
            fetch(`/GetMatchHistory?playerId=${playerId}&game=${game}`)
                .catch(error => {
                    console.error('Error fetching match history:', error);
                });
        }
    });
</script>
